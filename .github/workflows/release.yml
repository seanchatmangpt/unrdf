name: Release & Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 2.2.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '10.15.0'

jobs:
  # Validate Release Prerequisites
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      is_prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if prerelease
        id: check_prerelease
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a prerelease: $VERSION"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release: $VERSION"
          fi

      - name: Verify version format
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta|rc)\.[0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-{alpha|beta|rc}.N"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

      - name: Verify git tag matches package.json
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          if [ "$VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "Git tag: $VERSION"
            echo "package.json: $PACKAGE_VERSION"
            exit 1
          fi

          echo "✅ Version consistency verified: $VERSION"

  # Run Full Test Suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        node-version: [18, 20, 22]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run lint
        run: pnpm lint

      - name: Run tests
        run: pnpm test

      - name: Run E2E tests
        run: pnpm test:e2e || echo "⚠️ E2E tests skipped or failed"

      - name: Upload coverage
        if: matrix.node-version == 18
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: release-tests
          fail_ci_if_error: false

  # Build Release Artifacts
  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Verify build artifacts
        run: |
          echo "Verifying build artifacts..."

          if [ ! -d "dist" ]; then
            echo "❌ dist directory not found"
            exit 1
          fi

          if [ ! -f "dist/index.mjs" ]; then
            echo "❌ dist/index.mjs not found"
            exit 1
          fi

          # Test that built module loads
          node -e "
            import('./dist/index.mjs').then(module => {
              console.log('✅ Main module loads successfully');
            }).catch(err => {
              console.error('❌ Failed to load main module:', err);
              process.exit(1);
            });
          "

          echo "✅ Build artifacts verified"

      - name: Create tarball
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          pnpm pack
          mv unrdf-${VERSION}.tgz unrdf-${VERSION}.tar.gz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-build
          path: |
            dist/
            unrdf-*.tar.gz
          retention-days: 30

  # Publish to npm
  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [validate, build]
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Verify package can be published
        run: |
          echo "Verifying package..."
          pnpm publish --dry-run
          echo "✅ Package verification successful"

      - name: Publish to npm (stable)
        if: needs.validate.outputs.is_prerelease == 'false'
        run: pnpm publish --no-git-checks --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm (prerelease)
        if: needs.validate.outputs.is_prerelease == 'true'
        run: pnpm publish --no-git-checks --access public --tag next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify published package
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          sleep 10  # Wait for npm registry to update

          echo "Verifying published package..."
          npm view unrdf@${VERSION} version
          echo "✅ Package published successfully"

  # Build and Push Docker Image
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.is_prerelease == 'false'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, publish-npm]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-build
          path: ./release-artifacts

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          # Extract changelog for this version
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG=$(sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | sed '$d')
          else
            CHANGELOG="Release ${VERSION}"
          fi

          # Save to file for GitHub release
          cat > release-notes.md << 'EOF'
          ${{ env.CHANGELOG }}
          EOF

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ needs.validate.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}
          files: |
            ./release-artifacts/unrdf-*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-Release Validation
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: [validate, publish-npm, github-release]
    steps:
      - name: Verify npm package
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          echo "Installing unrdf@${VERSION} from npm..."
          npm install -g unrdf@${VERSION}

          echo "Verifying CLI..."
          unrdf --version

          echo "✅ Release validation successful"

      - name: Verify Docker image
        if: needs.validate.outputs.is_prerelease == 'false'
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          echo "Pulling Docker image..."
          docker pull ghcr.io/${{ github.repository }}:${VERSION}

          echo "Testing Docker image..."
          docker run --rm ghcr.io/${{ github.repository }}:${VERSION} --version

          echo "✅ Docker image validation successful"

  # Notify on Success/Failure
  notify:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [validate, validate-release]
    if: always()
    steps:
      - name: Success notification
        if: needs.validate-release.result == 'success'
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "🎉 Release v${VERSION} published successfully!"
          echo "- npm: https://www.npmjs.com/package/unrdf"
          echo "- GitHub: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${VERSION}"

      - name: Failure notification
        if: needs.validate-release.result == 'failure'
        run: |
          echo "❌ Release failed! Check workflow logs for details."
          exit 1
