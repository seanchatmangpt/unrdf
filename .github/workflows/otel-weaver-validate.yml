name: OpenTelemetry Weaver Validation

on:
  pull_request:
    paths:
      - 'weaver.yaml'
      - 'custom-conventions.yaml'
      - 'sidecar/server/middleware/*.mjs'
      - 'sidecar/server/utils/otel-*.mjs'
      - 'src/sidecar/client.mjs'
  push:
    branches:
      - main
    paths:
      - 'weaver.yaml'
      - 'custom-conventions.yaml'

jobs:
  validate-conventions:
    name: Validate Semantic Conventions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Install OpenTelemetry Weaver CLI
        run: |
          # Install weaver-cli (when available)
          # For now, validate YAML syntax manually
          npm install -g js-yaml

      - name: Validate weaver.yaml syntax
        run: |
          npx js-yaml weaver.yaml > /dev/null
          echo "‚úÖ weaver.yaml is valid YAML"

      - name: Validate custom-conventions.yaml syntax
        run: |
          npx js-yaml custom-conventions.yaml > /dev/null
          echo "‚úÖ custom-conventions.yaml is valid YAML"

      - name: Check semantic convention completeness
        run: |
          # Validate that all custom attributes are documented
          node -e "
          const yaml = require('js-yaml');
          const fs = require('fs');

          const conventions = yaml.load(fs.readFileSync('custom-conventions.yaml', 'utf8'));

          console.log('üìã Checking semantic conventions...');

          let errors = 0;

          // Validate groups
          if (!conventions.groups || conventions.groups.length === 0) {
            console.error('‚ùå No semantic convention groups found');
            errors++;
          }

          // Validate each group
          conventions.groups?.forEach(group => {
            if (!group.id) {
              console.error('‚ùå Group missing id');
              errors++;
            }

            if (!group.prefix) {
              console.error(\`‚ùå Group \${group.id} missing prefix\`);
              errors++;
            }

            if (!group.attributes || group.attributes.length === 0) {
              console.error(\`‚ùå Group \${group.id} has no attributes\`);
              errors++;
            }

            // Validate attributes
            group.attributes?.forEach(attr => {
              if (!attr.id) {
                console.error(\`‚ùå Attribute in group \${group.id} missing id\`);
                errors++;
              }

              if (!attr.type) {
                console.error(\`‚ùå Attribute \${attr.id} missing type\`);
                errors++;
              }

              if (!attr.brief) {
                console.error(\`‚ùå Attribute \${attr.id} missing brief description\`);
                errors++;
              }
            });
          });

          // Validate metrics
          if (conventions.metrics && conventions.metrics.length > 0) {
            conventions.metrics.forEach(metric => {
              if (!metric.name) {
                console.error('‚ùå Metric missing name');
                errors++;
              }

              if (!metric.instrument) {
                console.error(\`‚ùå Metric \${metric.name} missing instrument type\`);
                errors++;
              }
            });
          }

          if (errors > 0) {
            console.error(\`\n‚ùå Found \${errors} validation errors\`);
            process.exit(1);
          }

          console.log('\n‚úÖ All semantic conventions are valid');
          "

      - name: Generate instrumentation code
        run: |
          # Generate type-safe instrumentation from conventions
          # This will be implemented when weaver CLI is ready
          mkdir -p generated/otel
          echo "‚ö†Ô∏è  Auto-generation not yet implemented - requires weaver CLI"

      - name: Validate trace context propagation
        run: |
          # Check that all gRPC calls propagate trace context
          echo "üîç Checking trace context propagation..."

          if ! grep -q "traceparent" src/sidecar/client.mjs; then
            echo "‚ùå gRPC client missing W3C traceparent propagation"
            exit 1
          fi

          if ! grep -q "extractTraceContextFromHeaders" sidecar/server/middleware/01.telemetry.mjs; then
            echo "‚ùå Middleware missing trace context extraction"
            exit 1
          fi

          echo "‚úÖ Trace context propagation implemented"

      - name: Validate SLO definitions
        run: |
          node -e "
          const yaml = require('js-yaml');
          const fs = require('fs');

          const config = yaml.load(fs.readFileSync('weaver.yaml', 'utf8'));

          console.log('üéØ Validating SLO definitions...');

          if (!config.slo || !config.slo.objectives) {
            console.error('‚ùå No SLO objectives defined');
            process.exit(1);
          }

          config.slo.objectives.forEach(slo => {
            if (!slo.name) {
              console.error('‚ùå SLO missing name');
              process.exit(1);
            }

            if (!slo.target || slo.target <= 0 || slo.target > 1) {
              console.error(\`‚ùå SLO \${slo.name} has invalid target (must be 0-1)\`);
              process.exit(1);
            }

            if (!slo.error_budget) {
              console.error(\`‚ùå SLO \${slo.name} missing error_budget\`);
              process.exit(1);
            }

            console.log(\`‚úÖ SLO \${slo.name}: target \${slo.target * 100}%, budget \${slo.error_budget * 100}%\`);
          });

          console.log('\n‚úÖ All SLO definitions are valid');
          "

      - name: Check metric exemplar configuration
        run: |
          node -e "
          const yaml = require('js-yaml');
          const fs = require('fs');

          const config = yaml.load(fs.readFileSync('weaver.yaml', 'utf8'));

          if (!config.export?.exemplars?.enabled) {
            console.error('‚ùå Metric exemplars not enabled');
            process.exit(1);
          }

          console.log('‚úÖ Metric exemplars enabled for trace linking');
          "

  test-instrumentation:
    name: Test OpenTelemetry Instrumentation
    runs-on: ubuntu-latest
    needs: validate-conventions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run instrumentation tests
        run: |
          # Test that OTEL utilities work correctly
          cd sidecar
          pnpm test -- --run --reporter=verbose otel

      - name: Generate coverage report
        run: |
          cd sidecar
          pnpm test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./sidecar/coverage/lcov.info
          flags: otel-instrumentation
          name: otel-coverage

  generate-grafana-dashboards:
    name: Generate Grafana Dashboards
    runs-on: ubuntu-latest
    needs: validate-conventions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate dashboard JSONs
        run: |
          mkdir -p grafana/dashboards

          # Generate UNRDF overview dashboard
          node -e "
          const fs = require('fs');

          const dashboard = {
            title: 'UNRDF - Service Overview',
            tags: ['unrdf', 'otel', 'slo'],
            timezone: 'browser',
            panels: [
              {
                title: 'Request Rate',
                targets: [{
                  expr: 'rate(sidecar_requests_total[5m])',
                  legendFormat: '{{sidecar_method}}'
                }]
              },
              {
                title: 'P95 Latency',
                targets: [{
                  expr: 'histogram_quantile(0.95, rate(transaction_latency_bucket[5m]))',
                  legendFormat: '{{transaction_actor}}'
                }]
              },
              {
                title: 'Error Rate',
                targets: [{
                  expr: 'rate(sidecar_requests_total{status=\"error\"}[5m])',
                  legendFormat: 'Errors'
                }]
              },
              {
                title: 'SLO Compliance',
                targets: [{
                  expr: 'slo_compliance{slo_name=\"api_latency\"}',
                  legendFormat: '{{slo_name}}'
                }]
              }
            ]
          };

          fs.writeFileSync('grafana/dashboards/unrdf-overview.json', JSON.stringify(dashboard, null, 2));
          console.log('‚úÖ Generated UNRDF overview dashboard');
          "

      - name: Upload dashboards as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: grafana-dashboards
          path: grafana/dashboards/*.json

  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [validate-conventions, test-instrumentation]
    if: github.event_name == 'pull_request'

    steps:
      - name: Add PR comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ‚úÖ OpenTelemetry Weaver Validation Passed

              **Semantic Conventions**: Valid
              **Trace Context Propagation**: Implemented
              **SLO Definitions**: Valid
              **Metric Exemplars**: Enabled

              üéØ All OTEL instrumentation checks passed!

              üìä Grafana dashboards generated and ready for deployment.
              `
            })
