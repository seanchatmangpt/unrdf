name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '10.15.0'

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: |
          echo "Running pnpm audit..."
          pnpm audit --audit-level moderate || echo "⚠️ Vulnerabilities found"

          # Generate detailed audit report
          pnpm audit --json > audit-report.json || true

          # Check for critical/high vulnerabilities
          CRITICAL=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-report.json | jq '.metadata.vulnerabilities.high // 0')

          echo "Critical: $CRITICAL"
          echo "High: $HIGH"

          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "❌ Critical or high severity vulnerabilities found!"
            pnpm audit --audit-level high
            exit 1
          fi

          echo "✅ No critical or high vulnerabilities found"

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-report
          path: audit-report.json
          retention-days: 30

  # SAST (Static Application Security Testing)
  sast-scan:
    name: SAST Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # Secrets Scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # License Compliance
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          echo "Checking dependency licenses..."
          npx license-checker --summary --production --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0;Unlicense" || {
            echo "⚠️ Potentially problematic licenses found"
            npx license-checker --production
          }

      - name: Generate license report
        run: |
          echo "Generating license report..."
          npx license-checker --production --json > license-report.json
          npx license-checker --production --csv > license-report.csv

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.*
          retention-days: 30

  # Dependency Review (PRs only)
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-2.0,GPL-3.0,LGPL-2.0,LGPL-3.0,AGPL-3.0

  # Supply Chain Security
  supply-chain:
    name: Supply Chain Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for malicious packages
        run: |
          echo "Checking for known malicious packages..."
          npx @lavamoat/allow-scripts check || echo "⚠️ Potential issues found"

      - name: Verify package integrity
        run: |
          echo "Verifying package integrity..."
          pnpm install --frozen-lockfile --verify-store-integrity
          echo "✅ Package integrity verified"

  # Container Security Scanning
  container-scan:
    name: Container Security
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t unrdf:test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'unrdf:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Scan with Docker Scout
        uses: docker/scout-action@v1
        if: always()
        with:
          command: cves
          image: unrdf:test
          only-severities: critical,high
          exit-code: false

  # Security Best Practices Check
  security-checks:
    name: Security Best Practices
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for hardcoded secrets..."

          # Check for common secret patterns
          if grep -r "password\s*=\s*['\"]" --include="*.mjs" --include="*.js" src/ test/ 2>/dev/null; then
            echo "⚠️ Potential hardcoded passwords found"
          fi

          if grep -r "api_key\s*=\s*['\"]" --include="*.mjs" --include="*.js" src/ test/ 2>/dev/null; then
            echo "⚠️ Potential hardcoded API keys found"
          fi

          if grep -r "secret\s*=\s*['\"]" --include="*.mjs" --include="*.js" src/ test/ 2>/dev/null; then
            echo "⚠️ Potential hardcoded secrets found"
          fi

          echo "✅ Basic secret checks completed"

      - name: Check for unsafe patterns
        run: |
          echo "Checking for unsafe code patterns..."

          # Check for eval()
          if grep -r "eval(" --include="*.mjs" --include="*.js" src/ 2>/dev/null; then
            echo "⚠️ eval() usage found - potential security risk"
          fi

          # Check for child_process exec
          if grep -r "child_process.*exec" --include="*.mjs" --include="*.js" src/ 2>/dev/null; then
            echo "⚠️ child_process exec usage found - review for command injection"
          fi

          # Check for file system operations without validation
          if grep -r "fs\.readFile.*req\." --include="*.mjs" --include="*.js" src/ 2>/dev/null; then
            echo "⚠️ Potential path traversal vulnerability"
          fi

          echo "✅ Code pattern checks completed"

      - name: Verify security headers
        run: |
          echo "Checking for security configurations..."

          # Check if security headers are configured
          if [ -f "src/server.mjs" ] || [ -f "src/api/server.mjs" ]; then
            echo "Checking for security headers in server files..."
          fi

          echo "✅ Security configuration check completed"

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secrets-scan, license-scan, supply-chain, security-checks]
    if: always()
    steps:
      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Audit | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST Analysis | ${{ needs.sast-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Detection | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Supply Chain | ${{ needs.supply-chain.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Checks | ${{ needs.security-checks.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Check for failures
        run: |
          if [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.sast-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.secrets-scan.result }}" == "failure" ]]; then
            echo "❌ Critical security scans failed!"
            exit 1
          fi

          echo "✅ All critical security scans passed"
