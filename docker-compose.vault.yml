# Docker Compose configuration for HashiCorp Vault with KGC Sidecar
# Implements secure secrets management with quorum-based unsealing

version: '3.8'

services:
  # HashiCorp Vault server
  vault:
    image: hashicorp/vault:1.15
    container_name: kgc-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN:-dev-root-token}
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      VAULT_ADDR: "http://0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-data:/vault/data
      - vault-logs:/vault/logs
      - vault-config:/vault/config
      - ./scripts/vault-config.hcl:/vault/config/vault.hcl:ro
    command: server
    networks:
      - kgc-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # KGC Sidecar with Vault integration
  kgc-sidecar:
    build:
      context: ./sidecar
      dockerfile: ../test/e2e/testcontainers/Dockerfile.sidecar
    container_name: kgc-sidecar
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Vault configuration
      VAULT_ENABLED: "true"
      VAULT_ADDR: "http://vault:8200"
      VAULT_TOKEN: ${VAULT_TOKEN:-dev-root-token}
      VAULT_MOUNT_PATH: "kgc"
      VAULT_NAMESPACE: ${VAULT_NAMESPACE:-}
      VAULT_CACHE_TTL: "300000"
      VAULT_ENABLE_QUORUM: "true"
      VAULT_QUORUM_SHARES: "5"
      VAULT_QUORUM_THRESHOLD: "3"

      # KGC configuration
      KGC_ENABLE_TELEMETRY: "true"
      OTEL_SERVICE_NAME: "kgc-sidecar"
      OTEL_ENDPOINT: "http://jaeger:14268/api/traces"

      # Database configuration (URL will be retrieved from Vault)
      DATABASE_URL: ${DATABASE_URL:-postgresql://test:test@postgres:5432/kgc_test}

      # Observability
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_OBSERVABILITY: "true"
      ENABLE_METRICS: "true"
      ENABLE_TRACING: "true"
      SAMPLING_RATIO: "1.0"

      # Manager configuration
      MAX_HOOKS: "10000"
      TIMEOUT_MS: "2000"
      CACHE_SIZE: "10000"
      BATCH_SIZE: "1000"
      MAX_CONCURRENCY: "10"

      # Feature flags
      ENABLE_FAST_PATH: "true"
      ENABLE_CACHING: "true"
      ENABLE_BATCH_PROCESSING: "true"
      ENABLE_SANDBOXING: "true"
      SANDBOX_TIMEOUT: "30000"
      SANDBOX_MEMORY_LIMIT: "67108864"
      ENABLE_LOCKCHAIN: "false"
      ENABLE_RESOLUTION: "false"
    depends_on:
      vault:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - kgc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: kgc-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: kgc_test
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - kgc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: kgc-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    networks:
      - kgc-network

  # Vault initialization container (runs once)
  vault-init:
    image: hashicorp/vault:1.15
    container_name: kgc-vault-init
    depends_on:
      vault:
        condition: service_healthy
    environment:
      VAULT_ADDR: "http://vault:8200"
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN:-dev-root-token}
    volumes:
      - ./scripts/vault-init.sh:/scripts/vault-init.sh:ro
      - vault-keys:/vault/keys
    networks:
      - kgc-network
    command: /bin/sh /scripts/vault-init.sh
    restart: "no"

volumes:
  vault-data:
    driver: local
  vault-logs:
    driver: local
  vault-config:
    driver: local
  vault-keys:
    driver: local
  postgres-data:
    driver: local

networks:
  kgc-network:
    driver: bridge
