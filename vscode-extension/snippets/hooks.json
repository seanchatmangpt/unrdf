{
  "Define Hook": {
    "prefix": "defhook",
    "body": [
      "import { defineHook } from 'unrdf';",
      "",
      "export const ${1:hookName} = defineHook({",
      "  name: '${1:hookName}',",
      "  description: '${2:Hook description}',",
      "  version: '1.0.0',",
      "  ",
      "  triggers: {",
      "    events: ['${3:onCreate}', '${4:onUpdate}'],",
      "    patterns: {",
      "      subject: '${5:?s}',",
      "      predicate: '${6:?p}',",
      "      object: '${7:?o}'",
      "    }",
      "  },",
      "  ",
      "  async execute(context) {",
      "    const { quad, store, metadata } = context;",
      "    ",
      "    // Hook logic here",
      "    ${8:console.log('Hook executed', quad);}",
      "    ",
      "    return {",
      "      success: true,",
      "      modified: false",
      "    };",
      "  }",
      "});",
      "$0"
    ],
    "description": "Define a new Knowledge Hook"
  },
  "SPARQL Query Hook": {
    "prefix": "sparqlhook",
    "body": [
      "import { defineHook } from 'unrdf';",
      "",
      "export const ${1:queryHook} = defineHook({",
      "  name: '${1:queryHook}',",
      "  description: 'Execute SPARQL query on trigger',",
      "  ",
      "  triggers: {",
      "    events: ['${2:onCreate}']",
      "  },",
      "  ",
      "  async execute(context) {",
      "    const { store } = context;",
      "    ",
      "    const query = `",
      "      SELECT ?${3:subject} ?${4:predicate} ?${5:object}",
      "      WHERE {",
      "        ?${3:subject} ?${4:predicate} ?${5:object} .",
      "        ${6:FILTER (?${4:predicate} = <http://example.org/property>)}",
      "      }",
      "      LIMIT ${7:10}",
      "    `;",
      "    ",
      "    const results = await store.query(query);",
      "    console.log('Query results:', results);",
      "    ",
      "    return { success: true, results };",
      "  }",
      "});",
      "$0"
    ],
    "description": "Create a hook with SPARQL query"
  },
  "Validation Hook": {
    "prefix": "valhook",
    "body": [
      "import { defineHook } from 'unrdf';",
      "import { z } from 'zod';",
      "",
      "const schema = z.object({",
      "  ${1:field}: z.string()${2:.min(1)}",
      "});",
      "",
      "export const ${3:validationHook} = defineHook({",
      "  name: '${3:validationHook}',",
      "  description: 'Validate data with Zod schema',",
      "  ",
      "  triggers: {",
      "    events: ['onCreate', 'onUpdate']",
      "  },",
      "  ",
      "  async execute(context) {",
      "    const { quad } = context;",
      "    ",
      "    try {",
      "      const data = {",
      "        ${1:field}: quad.object.value",
      "      };",
      "      ",
      "      schema.parse(data);",
      "      ",
      "      return { success: true, valid: true };",
      "    } catch (error) {",
      "      console.error('Validation failed:', error.errors);",
      "      return { success: false, valid: false, errors: error.errors };",
      "    }",
      "  }",
      "});",
      "$0"
    ],
    "description": "Create a validation hook with Zod"
  },
  "Audit Trail Hook": {
    "prefix": "audithook",
    "body": [
      "import { defineHook } from 'unrdf';",
      "",
      "export const ${1:auditHook} = defineHook({",
      "  name: '${1:auditHook}',",
      "  description: 'Record audit trail for changes',",
      "  ",
      "  triggers: {",
      "    events: ['onCreate', 'onUpdate', 'onDelete']",
      "  },",
      "  ",
      "  async execute(context) {",
      "    const { quad, event, metadata, auditTrail } = context;",
      "    ",
      "    await auditTrail.record({",
      "      timestamp: new Date().toISOString(),",
      "      event: event,",
      "      subject: quad.subject.value,",
      "      predicate: quad.predicate.value,",
      "      object: quad.object.value,",
      "      actor: metadata.actor || 'system',",
      "      signature: await auditTrail.sign(quad)",
      "    });",
      "    ",
      "    return { success: true, audited: true };",
      "  }",
      "});",
      "$0"
    ],
    "description": "Create an audit trail hook"
  },
  "Chain Hooks": {
    "prefix": "chainhook",
    "body": [
      "import { chainHooks } from 'unrdf';",
      "import { ${1:hook1}, ${2:hook2}, ${3:hook3} } from './${4:hooks}';",
      "",
      "export const ${5:chainedHook} = chainHooks([",
      "  ${1:hook1},",
      "  ${2:hook2},",
      "  ${3:hook3}",
      "], {",
      "  name: '${5:chainedHook}',",
      "  stopOnError: ${6:true},",
      "  parallel: ${7:false}",
      "});",
      "$0"
    ],
    "description": "Chain multiple hooks together"
  }
}
