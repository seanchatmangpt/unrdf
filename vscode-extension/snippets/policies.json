{
  "Define Policy Pack": {
    "prefix": "defpolicy",
    "body": [
      "import { definePolicyPack } from 'unrdf';",
      "",
      "export const ${1:policyPackName} = definePolicyPack({",
      "  name: '${1:policyPackName}',",
      "  description: '${2:Policy pack description}',",
      "  version: '1.0.0',",
      "  ",
      "  rules: [",
      "    {",
      "      name: '${3:ruleName}',",
      "      description: '${4:Rule description}',",
      "      severity: '${5|critical,high,medium,low,info|}',",
      "      enforcementLevel: '${6|mandatory,advisory,disabled|}',",
      "      ",
      "      validate: async (context) => {",
      "        const { quad, store } = context;",
      "        ",
      "        // Validation logic",
      "        ${7:const isValid = true;}",
      "        ",
      "        return {",
      "          valid: isValid,",
      "          message: isValid ? 'Validation passed' : 'Validation failed'",
      "        };",
      "      },",
      "      ",
      "      remediate: async (context) => {",
      "        // Remediation logic",
      "        ${8:console.log('Remediating...');}",
      "      }",
      "    }",
      "  ]",
      "});",
      "$0"
    ],
    "description": "Define a new Policy Pack"
  },
  "SHACL Validation Rule": {
    "prefix": "shaclpolicy",
    "body": [
      "{",
      "  name: '${1:shaclRule}',",
      "  description: 'Validate using SHACL shapes',",
      "  severity: '${2|critical,high,medium,low|}',",
      "  enforcementLevel: 'mandatory',",
      "  ",
      "  shaclShape: `",
      "    @prefix sh: <http://www.w3.org/ns/shacl#> .",
      "    @prefix ex: <http://example.org/> .",
      "    ",
      "    ex:${3:ShapeName}",
      "      a sh:NodeShape ;",
      "      sh:targetClass ex:${4:TargetClass} ;",
      "      sh:property [",
      "        sh:path ex:${5:property} ;",
      "        sh:datatype xsd:${6|string,integer,boolean,dateTime|} ;",
      "        sh:minCount ${7:1} ;",
      "        sh:maxCount ${8:1}",
      "      ] .",
      "  `,",
      "  ",
      "  validate: async (context) => {",
      "    const { store } = context;",
      "    const results = await store.validateSHACL(this.shaclShape);",
      "    return {",
      "      valid: results.conforms,",
      "      message: results.conforms ? 'SHACL validation passed' : 'SHACL validation failed',",
      "      violations: results.results",
      "    };",
      "  }",
      "}",
      "$0"
    ],
    "description": "Create SHACL validation rule"
  },
  "Resource Constraint Rule": {
    "prefix": "constraintpolicy",
    "body": [
      "{",
      "  name: '${1:constraintRule}',",
      "  description: 'Enforce resource constraints',",
      "  severity: '${2|critical,high,medium|}',",
      "  enforcementLevel: 'mandatory',",
      "  ",
      "  validate: async (context) => {",
      "    const { quad, store } = context;",
      "    ",
      "    // Check constraints",
      "    const query = `",
      "      SELECT (COUNT(*) as ?count)",
      "      WHERE {",
      "        ?s ?p ?o .",
      "        FILTER(?p = <${3:http://example.org/property}>)",
      "      }",
      "    `;",
      "    ",
      "    const results = await store.query(query);",
      "    const count = parseInt(results[0].count.value);",
      "    const maxAllowed = ${4:100};",
      "    ",
      "    return {",
      "      valid: count <= maxAllowed,",
      "      message: `Count: \\${count}, Max: \\${maxAllowed}`,",
      "      remediate: count > maxAllowed",
      "    };",
      "  },",
      "  ",
      "  remediate: async (context) => {",
      "    console.log('Remediation: Remove excess resources');",
      "    // Remediation logic here",
      "  }",
      "}",
      "$0"
    ],
    "description": "Create resource constraint rule"
  },
  "Security Policy Rule": {
    "prefix": "securitypolicy",
    "body": [
      "{",
      "  name: '${1:securityRule}',",
      "  description: 'Enforce security policy',",
      "  severity: 'critical',",
      "  enforcementLevel: 'mandatory',",
      "  ",
      "  validate: async (context) => {",
      "    const { quad, metadata } = context;",
      "    ",
      "    // Check permissions",
      "    const hasPermission = metadata.actor && ",
      "      metadata.permissions?.includes('${2:write}');",
      "    ",
      "    // Check signature",
      "    const hasValidSignature = metadata.signature && ",
      "      await verifySignature(metadata.signature, quad);",
      "    ",
      "    const isValid = hasPermission && hasValidSignature;",
      "    ",
      "    return {",
      "      valid: isValid,",
      "      message: isValid ? 'Security check passed' : 'Unauthorized access',",
      "      audit: true",
      "    };",
      "  }",
      "}",
      "$0"
    ],
    "description": "Create security policy rule"
  },
  "Compliance Policy": {
    "prefix": "compliancepolicy",
    "body": [
      "{",
      "  name: '${1:complianceRule}',",
      "  description: 'Ensure ${2:GDPR} compliance',",
      "  severity: 'critical',",
      "  enforcementLevel: 'mandatory',",
      "  tags: ['compliance', '${2:GDPR}'],",
      "  ",
      "  validate: async (context) => {",
      "    const { quad, store } = context;",
      "    ",
      "    // Check for required metadata",
      "    const hasConsent = await store.match(",
      "      quad.subject,",
      "      '<http://example.org/hasConsent>',",
      "      null",
      "    );",
      "    ",
      "    const hasRetentionPolicy = await store.match(",
      "      quad.subject,",
      "      '<http://example.org/retentionPolicy>',",
      "      null",
      "    );",
      "    ",
      "    const isCompliant = hasConsent.length > 0 && hasRetentionPolicy.length > 0;",
      "    ",
      "    return {",
      "      valid: isCompliant,",
      "      message: isCompliant ? 'Compliant with ${2:GDPR}' : 'Missing compliance metadata',",
      "      audit: true",
      "    };",
      "  }",
      "}",
      "$0"
    ],
    "description": "Create compliance policy rule"
  }
}
