#!/bin/bash
#
# Generate Self-Signed Certificates for Development
# Creates CA, server, and client certificates for mTLS testing
#

set -e

CERTS_DIR="$(cd "$(dirname "$0")/../sidecar/certs" && pwd)"
DAYS_VALID=365

echo "🔐 Generating self-signed certificates for development..."
echo "📁 Certificates will be stored in: $CERTS_DIR"

# Create certs directory
mkdir -p "$CERTS_DIR"
cd "$CERTS_DIR"

# 1. Generate CA (Certificate Authority)
echo "📋 Step 1: Generating Certificate Authority..."

openssl genrsa -out ca-key.pem 4096

openssl req -new -x509 -days $DAYS_VALID -key ca-key.pem -out ca-cert.pem \
  -subj "/C=US/ST=CA/L=SanFrancisco/O=UNRDF/OU=Development/CN=UNRDF-CA"

echo "✅ CA certificate generated: ca-cert.pem"

# 2. Generate Server Certificate
echo "📋 Step 2: Generating server certificate..."

openssl genrsa -out server-key.pem 4096

openssl req -new -key server-key.pem -out server-csr.pem \
  -subj "/C=US/ST=CA/L=SanFrancisco/O=UNRDF/OU=Sidecar/CN=localhost"

# Create OpenSSL config for SAN (Subject Alternative Names)
cat > server-san.cnf <<EOF
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
C = US
ST = CA
L = SanFrancisco
O = UNRDF
OU = Sidecar
CN = localhost

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = localhost
DNS.2 = *.localhost
DNS.3 = sidecar
DNS.4 = *.sidecar
IP.1 = 127.0.0.1
IP.2 = ::1
EOF

openssl x509 -req -in server-csr.pem -CA ca-cert.pem -CAkey ca-key.pem \
  -CAcreateserial -out server-cert.pem -days $DAYS_VALID \
  -extensions v3_req -extfile server-san.cnf

echo "✅ Server certificate generated: server-cert.pem"

# 3. Generate Client Certificate (for mTLS)
echo "📋 Step 3: Generating client certificate..."

openssl genrsa -out client-key.pem 4096

openssl req -new -key client-key.pem -out client-csr.pem \
  -subj "/C=US/ST=CA/L=SanFrancisco/O=UNRDF/OU=Agent/CN=unrdf-agent"

openssl x509 -req -in client-csr.pem -CA ca-cert.pem -CAkey ca-key.pem \
  -CAcreateserial -out client-cert.pem -days $DAYS_VALID

echo "✅ Client certificate generated: client-cert.pem"

# 4. Create combined PEM files
echo "📋 Step 4: Creating combined PEM files..."

cat server-cert.pem ca-cert.pem > server-chain.pem
cat client-cert.pem ca-cert.pem > client-chain.pem

echo "✅ Certificate chains created"

# 5. Generate DH parameters for Perfect Forward Secrecy
echo "📋 Step 5: Generating DH parameters (this may take a while)..."

openssl dhparam -out dhparam.pem 2048

echo "✅ DH parameters generated: dhparam.pem"

# 6. Set proper permissions
echo "📋 Step 6: Setting file permissions..."

chmod 600 *-key.pem
chmod 644 *-cert.pem *.pem

echo "✅ Permissions set"

# 7. Display certificate info
echo ""
echo "📊 Certificate Information:"
echo ""
echo "CA Certificate:"
openssl x509 -in ca-cert.pem -noout -subject -issuer -dates

echo ""
echo "Server Certificate:"
openssl x509 -in server-cert.pem -noout -subject -issuer -dates

echo ""
echo "Client Certificate:"
openssl x509 -in client-cert.pem -noout -subject -issuer -dates

# 8. Create .env example
cat > ../.env.certs.example <<EOF
# TLS/mTLS Configuration (Development)
# Generated by scripts/generate-certs.sh

# Server certificates
TLS_CERT_PATH=./certs/server-cert.pem
TLS_KEY_PATH=./certs/server-key.pem
TLS_CA_PATH=./certs/ca-cert.pem
TLS_DH_PARAMS=./certs/dhparam.pem

# Client certificates (for mTLS)
MTLS_CLIENT_CERT=./certs/client-cert.pem
MTLS_CLIENT_KEY=./certs/client-key.pem

# TLS settings
TLS_MIN_VERSION=TLSv1.3
TLS_CIPHERS=TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256

# mTLS enforcement
MTLS_ENABLED=true
MTLS_REQUIRE_CLIENT_CERT=true

# HTTPS enforcement
ENFORCE_HTTPS=true
HSTS_MAX_AGE=31536000
HSTS_INCLUDE_SUBDOMAINS=true
HSTS_PRELOAD=true
EOF

echo ""
echo "✅ .env.certs.example created"

echo ""
echo "🎉 Certificate generation complete!"
echo ""
echo "📂 Generated files:"
echo "   - ca-cert.pem (CA certificate)"
echo "   - ca-key.pem (CA private key)"
echo "   - server-cert.pem (Server certificate)"
echo "   - server-key.pem (Server private key)"
echo "   - server-chain.pem (Server + CA chain)"
echo "   - client-cert.pem (Client certificate)"
echo "   - client-key.pem (Client private key)"
echo "   - client-chain.pem (Client + CA chain)"
echo "   - dhparam.pem (DH parameters)"
echo ""
echo "⚠️  These are DEVELOPMENT certificates only!"
echo "    For production, use proper certificates from:"
echo "    - Let's Encrypt (free)"
echo "    - AWS Certificate Manager"
echo "    - Your organization's CA"
echo ""
echo "📝 Next steps:"
echo "   1. Copy .env.certs.example to .env"
echo "   2. Update nuxt.config.mjs with cert paths"
echo "   3. Restart the sidecar server"
echo ""
