{
    "sourceFile": "playground/examples/validation.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758658176145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758658176145,
            "name": "Commit-0",
            "content": "#!/usr/bin/env node\n\n/**\n * Validation Example\n * \n * This example demonstrates RDF validation using SHACL:\n * - Creating SHACL shapes\n * - Validating RDF data against shapes\n * - Handling validation results\n */\n\nimport { useStore, useGraph, useTurtle, useValidator } from 'unrdf';\n\nconsole.log('‚úÖ UNRDF Validation Example\\n');\n\nasync function main() {\n  try {\n    // Initialize components\n    const store = useStore();\n    const graph = useGraph(store);\n    const turtle = useTurtle();\n    const validator = useValidator();\n\n    // Define SHACL shape for validating person data\n    const shaclShape = `\n      @prefix sh: <http://www.w3.org/ns/shacl#> .\n      @prefix foaf: <http://xmlns.com/foaf/0.1/> .\n      @prefix ex: <http://example.org/> .\n      \n      ex:PersonShape a sh:NodeShape ;\n        sh:targetClass foaf:Person ;\n        sh:property [\n          sh:path foaf:name ;\n          sh:datatype xsd:string ;\n          sh:minCount 1 ;\n          sh:maxCount 1 ;\n        ] ;\n        sh:property [\n          sh:path foaf:age ;\n          sh:datatype xsd:integer ;\n          sh:minInclusive 0 ;\n          sh:maxInclusive 150 ;\n        ] ;\n        sh:property [\n          sh:path foaf:email ;\n          sh:datatype xsd:string ;\n          sh:pattern \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\" ;\n        ] .\n    `;\n\n    // Parse and add the SHACL shape\n    const shapeQuads = await turtle.parse(shaclShape);\n    await graph.addQuads(shapeQuads);\n    console.log('‚úÖ SHACL shape loaded');\n\n    // Create some test data - some valid, some invalid\n    const testData = `\n      @prefix foaf: <http://xmlns.com/foaf/0.1/> .\n      @prefix ex: <http://example.org/> .\n      \n      # Valid person\n      ex:person1 a foaf:Person ;\n        foaf:name \"John Doe\" ;\n        foaf:age 30 ;\n        foaf:email \"john@example.com\" .\n      \n      # Invalid person - missing required name\n      ex:person2 a foaf:Person ;\n        foaf:age 25 ;\n        foaf:email \"jane@example.com\" .\n      \n      # Invalid person - invalid email format\n      ex:person3 a foaf:Person ;\n        foaf:name \"Bob Smith\" ;\n        foaf:age 35 ;\n        foaf:email \"invalid-email\" .\n      \n      # Invalid person - age out of range\n      ex:person4 a foaf:Person ;\n        foaf:name \"Alice Johnson\" ;\n        foaf:age 200 ;\n        foaf:email \"alice@example.com\" .\n    `;\n\n    const dataQuads = await turtle.parse(testData);\n    await graph.addQuads(dataQuads);\n    console.log('‚úÖ Test data loaded');\n\n    // Validate the data against the SHACL shape\n    console.log('\\nüîç Validating data against SHACL shape...');\n    const validationResults = await validator.validate(graph.getQuads(), shapeQuads);\n    \n    console.log(`\\nüìä Validation Results:`);\n    console.log(`  - Conforms: ${validationResults.conforms}`);\n    console.log(`  - Total violations: ${validationResults.results.length}`);\n\n    if (validationResults.results.length > 0) {\n      console.log('\\n‚ùå Validation Violations:');\n      for (const result of validationResults.results) {\n        console.log(`  - Focus Node: ${result.focusNode.value}`);\n        console.log(`    Severity: ${result.severity.value}`);\n        console.log(`    Message: ${result.resultMessage[0].value}`);\n        console.log(`    Path: ${result.resultPath ? result.resultPath.value : 'N/A'}`);\n        console.log('');\n      }\n    } else {\n      console.log('\\n‚úÖ All data conforms to the SHACL shape!');\n    }\n\n    // Demonstrate validation with custom constraints\n    console.log('\\nüîß Custom Validation Example:');\n    \n    // Create a custom validation function\n    const customValidator = (quads) => {\n      const violations = [];\n      const personQuads = quads.filter(q => \n        q.predicate.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' &&\n        q.object.value === 'http://xmlns.com/foaf/0.1/Person'\n      );\n\n      for (const personQuad of personQuads) {\n        const personSubject = personQuad.subject;\n        const nameQuads = quads.filter(q => \n          q.subject.equals(personSubject) && \n          q.predicate.value === 'http://xmlns.com/foaf/0.1/name'\n        );\n\n        if (nameQuads.length === 0) {\n          violations.push({\n            focusNode: personSubject.value,\n            message: 'Person must have a name',\n            severity: 'http://www.w3.org/ns/shacl#Violation'\n          });\n        }\n      }\n\n      return {\n        conforms: violations.length === 0,\n        results: violations\n      };\n    };\n\n    const customResults = customValidator(graph.getQuads());\n    console.log(`  - Custom validation conforms: ${customResults.conforms}`);\n    if (customResults.results.length > 0) {\n      console.log('  - Custom validation violations:');\n      for (const violation of customResults.results) {\n        console.log(`    * ${violation.focusNode}: ${violation.message}`);\n      }\n    }\n\n  } catch (error) {\n    console.error('‚ùå Error:', error.message);\n    console.error(error.stack);\n  }\n}\n\nmain();\n"
        }
    ]
}