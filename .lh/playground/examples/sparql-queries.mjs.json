{
    "sourceFile": "playground/examples/sparql-queries.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758658176145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758658176145,
            "name": "Commit-0",
            "content": "#!/usr/bin/env node\n\n/**\n * SPARQL Queries Example\n * \n * This example demonstrates various SPARQL query patterns:\n * - SELECT queries\n * - CONSTRUCT queries\n * - ASK queries\n * - DESCRIBE queries\n */\n\nimport { useStore, useGraph, useTurtle } from 'unrdf';\n\nconsole.log('üîç UNRDF SPARQL Queries Example\\n');\n\nasync function main() {\n  try {\n    // Initialize components\n    const store = useStore();\n    const graph = useGraph(store);\n    const turtle = useTurtle();\n\n    // Load sample data about books and authors\n    const bookData = `\n      @prefix ex: <http://example.org/> .\n      @prefix dc: <http://purl.org/dc/elements/1.1/> .\n      @prefix foaf: <http://xmlns.com/foaf/0.1/> .\n      \n      ex:book1 a ex:Book ;\n        dc:title \"The Great Gatsby\" ;\n        dc:creator ex:author1 ;\n        ex:publishedYear 1925 .\n      \n      ex:book2 a ex:Book ;\n        dc:title \"To Kill a Mockingbird\" ;\n        dc:creator ex:author2 ;\n        ex:publishedYear 1960 .\n      \n      ex:book3 a ex:Book ;\n        dc:title \"1984\" ;\n        dc:creator ex:author3 ;\n        ex:publishedYear 1949 .\n      \n      ex:author1 a foaf:Person ;\n        foaf:name \"F. Scott Fitzgerald\" .\n      \n      ex:author2 a foaf:Person ;\n        foaf:name \"Harper Lee\" .\n      \n      ex:author3 a foaf:Person ;\n        foaf:name \"George Orwell\" .\n    `;\n\n    const quads = await turtle.parse(bookData);\n    await graph.addQuads(quads);\n    console.log('‚úÖ Sample book data loaded');\n\n    // 1. SELECT Query - Get all books and their authors\n    console.log('\\nüìö SELECT Query - Books and Authors:');\n    const selectQuery = `\n      PREFIX ex: <http://example.org/>\n      PREFIX dc: <http://purl.org/dc/elements/1.1/>\n      PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n      \n      SELECT ?title ?authorName WHERE {\n        ?book a ex:Book ;\n          dc:title ?title ;\n          dc:creator ?author .\n        ?author foaf:name ?authorName .\n      }\n    `;\n\n    const selectResults = await graph.query(selectQuery);\n    for await (const binding of selectResults) {\n      console.log(`  - \"${binding.get('title').value}\" by ${binding.get('authorName').value}`);\n    }\n\n    // 2. CONSTRUCT Query - Create a new graph structure\n    console.log('\\nüèóÔ∏è  CONSTRUCT Query - Book Summary:');\n    const constructQuery = `\n      PREFIX ex: <http://example.org/>\n      PREFIX dc: <http://purl.org/dc/elements/1.1/>\n      PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n      \n      CONSTRUCT {\n        ?book ex:hasAuthor ?authorName .\n        ?book ex:hasTitle ?title .\n      } WHERE {\n        ?book a ex:Book ;\n          dc:title ?title ;\n          dc:creator ?author .\n        ?author foaf:name ?authorName .\n      }\n    `;\n\n    const constructResults = await graph.query(constructQuery);\n    const constructedQuads = [];\n    for await (const quad of constructResults) {\n      constructedQuads.push(quad);\n    }\n    \n    const constructedTurtle = await turtle.serialize(constructedQuads);\n    console.log(constructedTurtle);\n\n    // 3. ASK Query - Check if data exists\n    console.log('\\n‚ùì ASK Query - Does \"1984\" exist?');\n    const askQuery = `\n      PREFIX ex: <http://example.org/>\n      PREFIX dc: <http://purl.org/dc/elements/1.1/>\n      \n      ASK {\n        ?book dc:title \"1984\" .\n      }\n    `;\n\n    const askResult = await graph.query(askQuery);\n    console.log(`  Result: ${askResult}`);\n\n    // 4. DESCRIBE Query - Get all information about a resource\n    console.log('\\nüìñ DESCRIBE Query - Information about \"The Great Gatsby\":');\n    const describeQuery = `\n      PREFIX ex: <http://example.org/>\n      PREFIX dc: <http://purl.org/dc/elements/1.1/>\n      \n      DESCRIBE ?book WHERE {\n        ?book dc:title \"The Great Gatsby\" .\n      }\n    `;\n\n    const describeResults = await graph.query(describeQuery);\n    const describeQuads = [];\n    for await (const quad of describeResults) {\n      describeQuads.push(quad);\n    }\n    \n    const describeTurtle = await turtle.serialize(describeQuads);\n    console.log(describeTurtle);\n\n    // 5. Filtered Query - Books published after 1950\n    console.log('\\nüìÖ Filtered Query - Books published after 1950:');\n    const filterQuery = `\n      PREFIX ex: <http://example.org/>\n      PREFIX dc: <http://purl.org/dc/elements/1.1/>\n      \n      SELECT ?title ?year WHERE {\n        ?book a ex:Book ;\n          dc:title ?title ;\n          ex:publishedYear ?year .\n        FILTER(?year > 1950)\n      }\n    `;\n\n    const filterResults = await graph.query(filterQuery);\n    for await (const binding of filterResults) {\n      console.log(`  - \"${binding.get('title').value}\" (${binding.get('year').value})`);\n    }\n\n  } catch (error) {\n    console.error('‚ùå Error:', error.message);\n    console.error(error.stack);\n  }\n}\n\nmain();\n"
        }
    ]
}