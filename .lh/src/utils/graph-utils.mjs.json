{
    "sourceFile": "src/utils/graph-utils.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758655862931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758655862931,
            "name": "Commit-0",
            "content": "import { asNamedNode, asLiteral, getIRI } from \"./term-utils.mjs\";\n\n/**\n * Get all objects for subject+predicate\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} subject - Subject IRI or NamedNode\n * @param {string|import('n3').NamedNode} predicate - Predicate IRI or NamedNode\n * @returns {import('n3').Term[]} Array of object terms\n */\nexport const getObjects = (store, subject, predicate) =>\n  store.getObjects(subject, asNamedNode(predicate), null);\n\n/**\n * Get all subjects for predicate+object\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} predicate - Predicate IRI or NamedNode\n * @param {string|import('n3').Term} object - Object value or term\n * @returns {import('n3').Term[]} Array of subject terms\n */\nexport const getSubjects = (store, predicate, object) =>\n  store.getSubjects(asNamedNode(predicate), object, null);\n\n/**\n * Get all predicates for subject+object\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} subject - Subject IRI or NamedNode\n * @param {string|import('n3').Term} object - Object value or term\n * @returns {import('n3').Term[]} Array of predicate terms\n */\nexport const getPredicates = (store, subject, object) =>\n  store.getPredicates(subject, null, object);\n\n/**\n * Does subject have rdf:type of typeIRI\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} subject - Subject IRI or NamedNode\n * @param {string|import('n3').NamedNode} typeIRI - Type IRI or NamedNode\n * @returns {boolean} True if subject has the specified type\n */\nexport const isA = (store, subject, typeIRI) =>\n  store.countQuads(\n    subject, \n    asNamedNode(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"), \n    asNamedNode(typeIRI), \n    null\n  ) > 0;\n\n/**\n * Get all types for a subject\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} subject - Subject IRI or NamedNode\n * @returns {string[]} Array of type IRIs\n */\nexport const getTypes = (store, subject) =>\n  getObjects(store, subject, \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\")\n    .map(term => getIRI(term));\n\n/**\n * Predicate pluck (all values across subjects)\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} predicateIRI - Predicate IRI or NamedNode\n * @returns {import('n3').Quad[]} Array of quads with the specified predicate\n */\nexport const pluck = (store, predicateIRI) =>\n  store.getQuads(null, asNamedNode(predicateIRI), null, null);\n\n/**\n * Index subject â†’ objects by predicate\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} predicateIRI - Predicate IRI or NamedNode\n * @returns {Map<string, string[]>} Map of subject IRIs to their object values\n */\nexport const indexByPredicate = (store, predicateIRI) => {\n  const out = new Map();\n  for (const q of pluck(store, predicateIRI)) {\n    const s = q.subject.value;\n    if (!out.has(s)) out.set(s, []);\n    out.get(s).push(q.object.value);\n  }\n  return out;\n};\n\n/**\n * Get all properties for a subject\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} subject - Subject IRI or NamedNode\n * @returns {Map<string, string[]>} Map of predicate IRIs to their object values\n */\nexport const getProperties = (store, subject) => {\n  const properties = new Map();\n  const quads = store.getQuads(subject, null, null, null);\n  \n  for (const q of quads) {\n    const predicate = q.predicate.value;\n    if (!properties.has(predicate)) {\n      properties.set(predicate, []);\n    }\n    properties.get(predicate).push(q.object.value);\n  }\n  \n  return properties;\n};\n\n/**\n * Check if a subject exists in the store\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} subject - Subject IRI or NamedNode\n * @returns {boolean} True if subject exists\n */\nexport const hasSubject = (store, subject) =>\n  store.countQuads(subject, null, null, null) > 0;\n\n/**\n * Get all subjects in the store\n * @param {import('n3').Store} store - RDF store to query\n * @returns {string[]} Array of unique subject IRIs\n */\nexport const getAllSubjects = (store) => {\n  const subjects = new Set();\n  for (const q of store) {\n    subjects.add(q.subject.value);\n  }\n  return [...subjects];\n};\n\n/**\n * Get all predicates in the store\n * @param {import('n3').Store} store - RDF store to query\n * @returns {string[]} Array of unique predicate IRIs\n */\nexport const getAllPredicates = (store) => {\n  const predicates = new Set();\n  for (const q of store) {\n    predicates.add(q.predicate.value);\n  }\n  return [...predicates];\n};\n\n/**\n * Get all objects in the store\n * @param {import('n3').Store} store - RDF store to query\n * @returns {string[]} Array of unique object values\n */\nexport const getAllObjects = (store) => {\n  const objects = new Set();\n  for (const q of store) {\n    objects.add(q.object.value);\n  }\n  return [...objects];\n};\n\n/**\n * Find subjects that have a specific property value\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} predicate - Predicate IRI or NamedNode\n * @param {string} value - Object value to search for\n * @returns {string[]} Array of subject IRIs\n */\nexport const findByProperty = (store, predicate, value) =>\n  getSubjects(store, predicate, asLiteral(value))\n    .map(term => getIRI(term));\n\n/**\n * Get the first object value for a subject+predicate\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} subject - Subject IRI or NamedNode\n * @param {string|import('n3').NamedNode} predicate - Predicate IRI or NamedNode\n * @returns {string|null} First object value or null\n */\nexport const getFirstObject = (store, subject, predicate) => {\n  const objects = getObjects(store, subject, predicate);\n  return objects.length > 0 ? objects[0].value : null;\n};\n\n/**\n * Count quads for a subject\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} subject - Subject IRI or NamedNode\n * @returns {number} Number of quads for the subject\n */\nexport const countQuadsForSubject = (store, subject) =>\n  store.countQuads(subject, null, null, null);\n\n/**\n * Get all quads for a subject\n * @param {import('n3').Store} store - RDF store to query\n * @param {string|import('n3').NamedNode} subject - Subject IRI or NamedNode\n * @returns {import('n3').Quad[]} Array of quads for the subject\n */\nexport const getQuadsForSubject = (store, subject) =>\n  store.getQuads(subject, null, null, null);"
        }
    ]
}