{
    "sourceFile": "vitest.config.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1758655783109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758656505469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+/**\n+ * @fileoverview Vitest configuration for unrdf\n+ * Maximized for concurrency and performance\n+ */\n+import { defineConfig } from 'vitest/config';\n+\n+export default defineConfig({\n+  test: {\n+    // Maximize concurrency - use all available CPU cores\n+    pool: 'threads',\n+    poolOptions: {\n+      threads: {\n+        // Use all available CPU cores\n+        maxThreads: undefined,\n+        minThreads: 1,\n+        // Enable single-thread mode for better performance on I/O bound tests\n+        useAtomics: true,\n+      },\n+    },\n+    \n+    // Run tests in parallel by default\n+    concurrent: true,\n+    \n+    // Maximum number of concurrent test files\n+    maxConcurrency: 10,\n+    \n+    // Test timeout - generous for RDF operations\n+    testTimeout: 30000,\n+    \n+    // Hook timeout\n+    hookTimeout: 30000,\n+    \n+    // Coverage configuration\n+    coverage: {\n+      provider: 'v8',\n+      reporter: ['text', 'json', 'html'],\n+      // Exclude test files and config files from coverage\n+      exclude: [\n+        'node_modules/**',\n+        'test/**',\n+        '**/*.test.mjs',\n+        '**/*.config.mjs',\n+        'dist/**',\n+        'coverage/**',\n+      ],\n+      // Include source files\n+      include: ['src/**/*.mjs'],\n+      // Coverage thresholds\n+      thresholds: {\n+        global: {\n+          branches: 80,\n+          functions: 80,\n+          lines: 80,\n+          statements: 80,\n+        },\n+      },\n+    },\n+    \n+    // Environment configuration\n+    environment: 'node',\n+    \n+    // File patterns\n+    include: [\n+      'test/**/*.test.mjs', \n+      'test/**/*.spec.mjs',\n+      'test/composables/**/*.test.mjs',\n+      'test/utils/**/*.test.mjs'\n+    ],\n+    exclude: ['node_modules/**', 'dist/**'],\n+    \n+    // Reporter configuration\n+    reporter: ['verbose', 'json', 'html'],\n+    outputFile: {\n+      json: './coverage/test-results.json',\n+      html: './coverage/test-results.html',\n+    },\n+    \n+    // Global setup\n+    globalSetup: [],\n+    \n+    // Setup files\n+    setupFiles: [],\n+    \n+    // Test file patterns\n+    globals: false,\n+    \n+    // Isolate test environment\n+    isolate: true,\n+    \n+    // Pass with no tests\n+    passWithNoTests: true,\n+    \n+    // Retry failed tests\n+    retry: 2,\n+    \n+    // Bail on first failure (useful for CI)\n+    bail: 0,\n+    \n+    // Watch mode configuration\n+    watch: false,\n+    \n+    // Force Rerun on file change\n+    forceRerunTriggers: ['**/package.json/**', '**/vitest.config.*/**'],\n+    \n+    // Type checking\n+    typecheck: {\n+      enabled: false, // We're using JSDoc, not TypeScript\n+    },\n+    \n+    // Benchmark configuration\n+    benchmark: {\n+      outputFile: './coverage/benchmark-results.json',\n+    },\n+    \n+    // UI mode configuration\n+    ui: false,\n+    \n+    // API mode\n+    api: false,\n+    \n+    // Inspect mode\n+    inspect: false,\n+    \n+    // Inspect brk mode\n+    inspectBrk: false,\n+    \n+    // Log level\n+    logLevel: 'info',\n+    \n+    // Silent mode\n+    silent: false,\n+    \n+    // Reporter options\n+    reporterOptions: {\n+      verbose: {\n+        showDiff: true,\n+        showErrorStack: true,\n+      },\n+    },\n+    \n+    // Test name pattern\n+    testNamePattern: undefined,\n+    \n+    // Update snapshots\n+    update: false,\n+    \n+    // Related files\n+    related: undefined,\n+    \n+    // Run tests\n+    run: true,\n+    \n+    // Mode\n+    mode: 'test',\n+    \n+    // Root directory\n+    root: process.cwd(),\n+    \n+    // Config file\n+    config: undefined,\n+    \n+    // Dependencies\n+    deps: {\n+      // External dependencies that should be treated as external\n+      external: [],\n+      // Inline dependencies that should be bundled\n+      inline: [],\n+    },\n+    \n+    // Server configuration\n+    server: {\n+      // Source map support\n+      sourcemap: true,\n+    },\n+    \n+    // Worker configuration\n+    worker: {\n+      // Worker pool configuration\n+      pool: 'threads',\n+      poolOptions: {\n+        threads: {\n+          maxThreads: undefined,\n+          minThreads: 1,\n+          useAtomics: true,\n+        },\n+      },\n+    },\n+    \n+    // Browser configuration (not used for Node.js tests)\n+    browser: {\n+      enabled: false,\n+    },\n+    \n+    // Experimental features\n+    experimentalFeatures: {\n+      // Enable experimental features if needed\n+    },\n+  },\n+  \n+  // Resolve configuration\n+  resolve: {\n+    alias: {\n+      // Add any path aliases if needed\n+    },\n+  },\n+  \n+  // Define global constants\n+  define: {\n+    // Define any global constants\n+  },\n+  \n+  // Optimize dependencies\n+  optimizeDeps: {\n+    // Include dependencies that should be pre-bundled\n+    include: ['n3', 'zod', '@comunica/query-sparql'],\n+    // Exclude dependencies that should not be pre-bundled\n+    exclude: [],\n+  },\n+  \n+  // Build configuration\n+  build: {\n+    // Source map support\n+    sourcemap: true,\n+    // Minification\n+    minify: false,\n+    // Target\n+    target: 'node18',\n+  },\n+  \n+  // CSS configuration (not used for Node.js tests)\n+  css: {\n+    // CSS configuration\n+  },\n+  \n+  // JSON configuration\n+  json: {\n+    // JSON configuration\n+  },\n+  \n+  // Assets configuration\n+  assetsInclude: [],\n+  \n+  // Public directory\n+  publicDir: false,\n+  \n+  // Cache directory\n+  cacheDir: 'node_modules/.vite',\n+  \n+  // Clear screen\n+  clearScreen: true,\n+  \n+  // Log level\n+  logLevel: 'info',\n+  \n+  // Custom logger\n+  customLogger: undefined,\n+  \n+  // Environment variables\n+  envPrefix: ['VITE_', 'VITEST_'],\n+  \n+  // Environment variables\n+  envDir: process.cwd(),\n+  \n+  // Mode\n+  mode: 'test',\n+  \n+  // Command\n+  command: 'test',\n+  \n+  // Is production\n+  isProduction: false,\n+  \n+  // Is preview\n+  isPreview: false,\n+  \n+  // Is test\n+  isTest: true,\n+  \n+  // Is build\n+  isBuild: false,\n+  \n+  // Is serve\n+  isServe: false,\n+  \n+  // Is optimize\n+  isOptimize: false,\n+  \n+  // Is watch\n+  isWatch: false,\n+  \n+  // Is dev\n+  isDev: false,\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758657943444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,293 +289,5 @@\n   isWatch: false,\n   \n   // Is dev\n   isDev: false,\n-});\n-/**\n- * @fileoverview Vitest configuration for unrdf\n- * Maximized for concurrency and performance\n- */\n-import { defineConfig } from 'vitest/config';\n-\n-export default defineConfig({\n-  test: {\n-    // Maximize concurrency - use all available CPU cores\n-    pool: 'threads',\n-    poolOptions: {\n-      threads: {\n-        // Use all available CPU cores\n-        maxThreads: undefined,\n-        minThreads: 1,\n-        // Enable single-thread mode for better performance on I/O bound tests\n-        useAtomics: true,\n-      },\n-    },\n-    \n-    // Run tests in parallel by default\n-    concurrent: true,\n-    \n-    // Maximum number of concurrent test files\n-    maxConcurrency: 10,\n-    \n-    // Test timeout - generous for RDF operations\n-    testTimeout: 30000,\n-    \n-    // Hook timeout\n-    hookTimeout: 30000,\n-    \n-    // Coverage configuration\n-    coverage: {\n-      provider: 'v8',\n-      reporter: ['text', 'json', 'html'],\n-      // Exclude test files and config files from coverage\n-      exclude: [\n-        'node_modules/**',\n-        'test/**',\n-        '**/*.test.mjs',\n-        '**/*.config.mjs',\n-        'dist/**',\n-        'coverage/**',\n-      ],\n-      // Include source files\n-      include: ['src/**/*.mjs'],\n-      // Coverage thresholds\n-      thresholds: {\n-        global: {\n-          branches: 80,\n-          functions: 80,\n-          lines: 80,\n-          statements: 80,\n-        },\n-      },\n-    },\n-    \n-    // Environment configuration\n-    environment: 'node',\n-    \n-    // File patterns\n-    include: ['test/**/*.test.mjs', 'test/**/*.spec.mjs'],\n-    exclude: ['node_modules/**', 'dist/**'],\n-    \n-    // Reporter configuration\n-    reporter: ['verbose', 'json', 'html'],\n-    outputFile: {\n-      json: './coverage/test-results.json',\n-      html: './coverage/test-results.html',\n-    },\n-    \n-    // Global setup\n-    globalSetup: [],\n-    \n-    // Setup files\n-    setupFiles: [],\n-    \n-    // Test file patterns\n-    globals: false,\n-    \n-    // Isolate test environment\n-    isolate: true,\n-    \n-    // Pass with no tests\n-    passWithNoTests: true,\n-    \n-    // Retry failed tests\n-    retry: 2,\n-    \n-    // Bail on first failure (useful for CI)\n-    bail: 0,\n-    \n-    // Watch mode configuration\n-    watch: false,\n-    \n-    // Force Rerun on file change\n-    forceRerunTriggers: ['**/package.json/**', '**/vitest.config.*/**'],\n-    \n-    // Type checking\n-    typecheck: {\n-      enabled: false, // We're using JSDoc, not TypeScript\n-    },\n-    \n-    // Benchmark configuration\n-    benchmark: {\n-      outputFile: './coverage/benchmark-results.json',\n-    },\n-    \n-    // UI mode configuration\n-    ui: false,\n-    \n-    // API mode\n-    api: false,\n-    \n-    // Inspect mode\n-    inspect: false,\n-    \n-    // Inspect brk mode\n-    inspectBrk: false,\n-    \n-    // Log level\n-    logLevel: 'info',\n-    \n-    // Silent mode\n-    silent: false,\n-    \n-    // Reporter options\n-    reporterOptions: {\n-      verbose: {\n-        showDiff: true,\n-        showErrorStack: true,\n-      },\n-    },\n-    \n-    // Test name pattern\n-    testNamePattern: undefined,\n-    \n-    // Update snapshots\n-    update: false,\n-    \n-    // Related files\n-    related: undefined,\n-    \n-    // Run tests\n-    run: true,\n-    \n-    // Mode\n-    mode: 'test',\n-    \n-    // Root directory\n-    root: process.cwd(),\n-    \n-    // Config file\n-    config: undefined,\n-    \n-    // Dependencies\n-    deps: {\n-      // External dependencies that should be treated as external\n-      external: [],\n-      // Inline dependencies that should be bundled\n-      inline: [],\n-    },\n-    \n-    // Server configuration\n-    server: {\n-      // Source map support\n-      sourcemap: true,\n-    },\n-    \n-    // Worker configuration\n-    worker: {\n-      // Worker pool configuration\n-      pool: 'threads',\n-      poolOptions: {\n-        threads: {\n-          maxThreads: undefined,\n-          minThreads: 1,\n-          useAtomics: true,\n-        },\n-      },\n-    },\n-    \n-    // Browser configuration (not used for Node.js tests)\n-    browser: {\n-      enabled: false,\n-    },\n-    \n-    // Experimental features\n-    experimentalFeatures: {\n-      // Enable experimental features if needed\n-    },\n-  },\n-  \n-  // Resolve configuration\n-  resolve: {\n-    alias: {\n-      // Add any path aliases if needed\n-    },\n-  },\n-  \n-  // Define global constants\n-  define: {\n-    // Define any global constants\n-  },\n-  \n-  // Optimize dependencies\n-  optimizeDeps: {\n-    // Include dependencies that should be pre-bundled\n-    include: ['n3', 'zod', '@comunica/query-sparql'],\n-    // Exclude dependencies that should not be pre-bundled\n-    exclude: [],\n-  },\n-  \n-  // Build configuration\n-  build: {\n-    // Source map support\n-    sourcemap: true,\n-    // Minification\n-    minify: false,\n-    // Target\n-    target: 'node18',\n-  },\n-  \n-  // CSS configuration (not used for Node.js tests)\n-  css: {\n-    // CSS configuration\n-  },\n-  \n-  // JSON configuration\n-  json: {\n-    // JSON configuration\n-  },\n-  \n-  // Assets configuration\n-  assetsInclude: [],\n-  \n-  // Public directory\n-  publicDir: false,\n-  \n-  // Cache directory\n-  cacheDir: 'node_modules/.vite',\n-  \n-  // Clear screen\n-  clearScreen: true,\n-  \n-  // Log level\n-  logLevel: 'info',\n-  \n-  // Custom logger\n-  customLogger: undefined,\n-  \n-  // Environment variables\n-  envPrefix: ['VITE_', 'VITEST_'],\n-  \n-  // Environment variables\n-  envDir: process.cwd(),\n-  \n-  // Mode\n-  mode: 'test',\n-  \n-  // Command\n-  command: 'test',\n-  \n-  // Is production\n-  isProduction: false,\n-  \n-  // Is preview\n-  isPreview: false,\n-  \n-  // Is test\n-  isTest: true,\n-  \n-  // Is build\n-  isBuild: false,\n-  \n-  // Is serve\n-  isServe: false,\n-  \n-  // Is optimize\n-  isOptimize: false,\n-  \n-  // Is watch\n-  isWatch: false,\n-  \n-  // Is dev\n-  isDev: false,\n });\n\\ No newline at end of file\n"
                }
            ],
            "date": 1758655783109,
            "name": "Commit-0",
            "content": "/**\n * @fileoverview Vitest configuration for unrdf\n * Maximized for concurrency and performance\n */\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    // Maximize concurrency - use all available CPU cores\n    pool: 'threads',\n    poolOptions: {\n      threads: {\n        // Use all available CPU cores\n        maxThreads: undefined,\n        minThreads: 1,\n        // Enable single-thread mode for better performance on I/O bound tests\n        useAtomics: true,\n      },\n    },\n    \n    // Run tests in parallel by default\n    concurrent: true,\n    \n    // Maximum number of concurrent test files\n    maxConcurrency: 10,\n    \n    // Test timeout - generous for RDF operations\n    testTimeout: 30000,\n    \n    // Hook timeout\n    hookTimeout: 30000,\n    \n    // Coverage configuration\n    coverage: {\n      provider: 'v8',\n      reporter: ['text', 'json', 'html'],\n      // Exclude test files and config files from coverage\n      exclude: [\n        'node_modules/**',\n        'test/**',\n        '**/*.test.mjs',\n        '**/*.config.mjs',\n        'dist/**',\n        'coverage/**',\n      ],\n      // Include source files\n      include: ['src/**/*.mjs'],\n      // Coverage thresholds\n      thresholds: {\n        global: {\n          branches: 80,\n          functions: 80,\n          lines: 80,\n          statements: 80,\n        },\n      },\n    },\n    \n    // Environment configuration\n    environment: 'node',\n    \n    // File patterns\n    include: ['test/**/*.test.mjs', 'test/**/*.spec.mjs'],\n    exclude: ['node_modules/**', 'dist/**'],\n    \n    // Reporter configuration\n    reporter: ['verbose', 'json', 'html'],\n    outputFile: {\n      json: './coverage/test-results.json',\n      html: './coverage/test-results.html',\n    },\n    \n    // Global setup\n    globalSetup: [],\n    \n    // Setup files\n    setupFiles: [],\n    \n    // Test file patterns\n    globals: false,\n    \n    // Isolate test environment\n    isolate: true,\n    \n    // Pass with no tests\n    passWithNoTests: true,\n    \n    // Retry failed tests\n    retry: 2,\n    \n    // Bail on first failure (useful for CI)\n    bail: 0,\n    \n    // Watch mode configuration\n    watch: false,\n    \n    // Force Rerun on file change\n    forceRerunTriggers: ['**/package.json/**', '**/vitest.config.*/**'],\n    \n    // Type checking\n    typecheck: {\n      enabled: false, // We're using JSDoc, not TypeScript\n    },\n    \n    // Benchmark configuration\n    benchmark: {\n      outputFile: './coverage/benchmark-results.json',\n    },\n    \n    // UI mode configuration\n    ui: false,\n    \n    // API mode\n    api: false,\n    \n    // Inspect mode\n    inspect: false,\n    \n    // Inspect brk mode\n    inspectBrk: false,\n    \n    // Log level\n    logLevel: 'info',\n    \n    // Silent mode\n    silent: false,\n    \n    // Reporter options\n    reporterOptions: {\n      verbose: {\n        showDiff: true,\n        showErrorStack: true,\n      },\n    },\n    \n    // Test name pattern\n    testNamePattern: undefined,\n    \n    // Update snapshots\n    update: false,\n    \n    // Related files\n    related: undefined,\n    \n    // Run tests\n    run: true,\n    \n    // Mode\n    mode: 'test',\n    \n    // Root directory\n    root: process.cwd(),\n    \n    // Config file\n    config: undefined,\n    \n    // Dependencies\n    deps: {\n      // External dependencies that should be treated as external\n      external: [],\n      // Inline dependencies that should be bundled\n      inline: [],\n    },\n    \n    // Server configuration\n    server: {\n      // Source map support\n      sourcemap: true,\n    },\n    \n    // Worker configuration\n    worker: {\n      // Worker pool configuration\n      pool: 'threads',\n      poolOptions: {\n        threads: {\n          maxThreads: undefined,\n          minThreads: 1,\n          useAtomics: true,\n        },\n      },\n    },\n    \n    // Browser configuration (not used for Node.js tests)\n    browser: {\n      enabled: false,\n    },\n    \n    // Experimental features\n    experimentalFeatures: {\n      // Enable experimental features if needed\n    },\n  },\n  \n  // Resolve configuration\n  resolve: {\n    alias: {\n      // Add any path aliases if needed\n    },\n  },\n  \n  // Define global constants\n  define: {\n    // Define any global constants\n  },\n  \n  // Optimize dependencies\n  optimizeDeps: {\n    // Include dependencies that should be pre-bundled\n    include: ['n3', 'zod', '@comunica/query-sparql'],\n    // Exclude dependencies that should not be pre-bundled\n    exclude: [],\n  },\n  \n  // Build configuration\n  build: {\n    // Source map support\n    sourcemap: true,\n    // Minification\n    minify: false,\n    // Target\n    target: 'node18',\n  },\n  \n  // CSS configuration (not used for Node.js tests)\n  css: {\n    // CSS configuration\n  },\n  \n  // JSON configuration\n  json: {\n    // JSON configuration\n  },\n  \n  // Assets configuration\n  assetsInclude: [],\n  \n  // Public directory\n  publicDir: false,\n  \n  // Cache directory\n  cacheDir: 'node_modules/.vite',\n  \n  // Clear screen\n  clearScreen: true,\n  \n  // Log level\n  logLevel: 'info',\n  \n  // Custom logger\n  customLogger: undefined,\n  \n  // Environment variables\n  envPrefix: ['VITE_', 'VITEST_'],\n  \n  // Environment variables\n  envDir: process.cwd(),\n  \n  // Mode\n  mode: 'test',\n  \n  // Command\n  command: 'test',\n  \n  // Is production\n  isProduction: false,\n  \n  // Is preview\n  isPreview: false,\n  \n  // Is test\n  isTest: true,\n  \n  // Is build\n  isBuild: false,\n  \n  // Is serve\n  isServe: false,\n  \n  // Is optimize\n  isOptimize: false,\n  \n  // Is watch\n  isWatch: false,\n  \n  // Is dev\n  isDev: false,\n});"
        }
    ]
}