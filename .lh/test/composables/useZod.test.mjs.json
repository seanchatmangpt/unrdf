{
    "sourceFile": "test/composables/useZod.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758656505420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758656505420,
            "name": "Commit-0",
            "content": "import { describe, expect, it, beforeEach } from \"vitest\";\nimport { z } from \"zod\";\n\n/**\n * @fileoverview Tests for useZod composable\n * \n * Tests the Zod validation functionality using London School of TDD\n */\n\ndescribe(\"useZod\", () => {\n  let useZod;\n  \n  beforeEach(() => {\n    useZod = null;\n  });\n\n  it(\"should create zod interface\", () => {\n    // Arrange\n    useZod = () => ({\n      validate: (data, schema) => {\n        // Simplified Zod validation for testing\n        return schema.parse(data);\n      },\n      validateOrThrow: (data, schema) => {\n        try {\n          return schema.parse(data);\n        } catch (error) {\n          throw new Error(`Zod validation failed: ${error.message}`);\n        }\n      }\n    });\n    \n    // Act\n    const zod = useZod();\n    \n    // Assert\n    expect(typeof zod.validate).toBe(\"function\");\n    expect(typeof zod.validateOrThrow).toBe(\"function\");\n  });\n\n  it(\"should validate data with Zod schema\", () => {\n    // Arrange\n    const PersonSchema = z.object({\n      name: z.string(),\n      age: z.number().int().min(0)\n    });\n    \n    const validData = { name: \"John\", age: 30 };\n    \n    useZod = () => ({\n      validate: (data, schema) => {\n        // Simplified Zod validation for testing\n        return schema.parse(data);\n      },\n      validateOrThrow: (data, schema) => {\n        try {\n          return schema.parse(data);\n        } catch (error) {\n          throw new Error(`Zod validation failed: ${error.message}`);\n        }\n      }\n    });\n    \n    const zod = useZod();\n    \n    // Act\n    const result = zod.validate(validData, PersonSchema);\n    \n    // Assert\n    expect(result).toEqual(validData);\n  });\n\n  it(\"should throw error for invalid data\", () => {\n    // Arrange\n    const PersonSchema = z.object({\n      name: z.string(),\n      age: z.number().int().min(0)\n    });\n    \n    const invalidData = { name: \"John\", age: -5 };\n    \n    useZod = () => ({\n      validate: (data, schema) => {\n        // Simplified Zod validation for testing\n        return schema.parse(data);\n      },\n      validateOrThrow: (data, schema) => {\n        try {\n          return schema.parse(data);\n        } catch (error) {\n          throw new Error(`Zod validation failed: ${error.message}`);\n        }\n      }\n    });\n    \n    const zod = useZod();\n    \n    // Act & Assert\n    expect(() => zod.validateOrThrow(invalidData, PersonSchema)).toThrow(\"Zod validation failed\");\n  });\n});\n"
        }
    ]
}