{
    "sourceFile": "test/composables/usePrefixes.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758656505419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758656505419,
            "name": "Commit-0",
            "content": "import { describe, expect, it, beforeEach } from \"vitest\";\n\n/**\n * @fileoverview Tests for usePrefixes composable\n * \n * Tests the prefix management functionality using London School of TDD\n */\n\ndescribe(\"usePrefixes\", () => {\n  let usePrefixes;\n  \n  beforeEach(() => {\n    usePrefixes = null;\n  });\n\n  it(\"should register prefix mappings\", () => {\n    // Arrange\n    const prefixMap = {\n      \"ex\": \"http://example.org/\",\n      \"foaf\": \"http://xmlns.com/foaf/0.1/\"\n    };\n    \n    // Act\n    usePrefixes = () => {\n      const prefixes = new Map();\n      return {\n        register: (map) => {\n          Object.entries(map).forEach(([prefix, uri]) => {\n            prefixes.set(prefix, uri);\n          });\n        },\n        expand: (curie) => {\n          const [prefix, local] = curie.split(\":\");\n          return prefixes.has(prefix) ? `${prefixes.get(prefix)}${local}` : curie;\n        },\n        shrink: (iri) => {\n          for (const [prefix, uri] of prefixes.entries()) {\n            if (iri.startsWith(uri)) {\n              return `${prefix}:${iri.slice(uri.length)}`;\n            }\n          }\n          return iri;\n        },\n        list: () => Object.fromEntries(prefixes)\n      };\n    };\n    \n    const prefixes = usePrefixes();\n    prefixes.register(prefixMap);\n    \n    // Assert\n    expect(prefixes.list()).toEqual(prefixMap);\n  });\n\n  it(\"should expand CURIEs to full IRIs\", () => {\n    // Arrange\n    const prefixMap = {\n      \"ex\": \"http://example.org/\",\n      \"foaf\": \"http://xmlns.com/foaf/0.1/\"\n    };\n    \n    // Act\n    usePrefixes = () => {\n      const prefixes = new Map();\n      return {\n        register: (map) => {\n          Object.entries(map).forEach(([prefix, uri]) => {\n            prefixes.set(prefix, uri);\n          });\n        },\n        expand: (curie) => {\n          const [prefix, local] = curie.split(\":\");\n          return prefixes.has(prefix) ? `${prefixes.get(prefix)}${local}` : curie;\n        },\n        shrink: (iri) => {\n          for (const [prefix, uri] of prefixes.entries()) {\n            if (iri.startsWith(uri)) {\n              return `${prefix}:${iri.slice(uri.length)}`;\n            }\n          }\n          return iri;\n        },\n        list: () => Object.fromEntries(prefixes)\n      };\n    };\n    \n    const prefixes = usePrefixes();\n    prefixes.register(prefixMap);\n    \n    // Assert\n    expect(prefixes.expand(\"ex:Person\")).toBe(\"http://example.org/Person\");\n    expect(prefixes.expand(\"foaf:name\")).toBe(\"http://xmlns.com/foaf/0.1/name\");\n    expect(prefixes.expand(\"unknown:term\")).toBe(\"unknown:term\");\n  });\n\n  it(\"should shrink full IRIs to CURIEs\", () => {\n    // Arrange\n    const prefixMap = {\n      \"ex\": \"http://example.org/\",\n      \"foaf\": \"http://xmlns.com/foaf/0.1/\"\n    };\n    \n    // Act\n    usePrefixes = () => {\n      const prefixes = new Map();\n      return {\n        register: (map) => {\n          Object.entries(map).forEach(([prefix, uri]) => {\n            prefixes.set(prefix, uri);\n          });\n        },\n        expand: (curie) => {\n          const [prefix, local] = curie.split(\":\");\n          return prefixes.has(prefix) ? `${prefixes.get(prefix)}${local}` : curie;\n        },\n        shrink: (iri) => {\n          for (const [prefix, uri] of prefixes.entries()) {\n            if (iri.startsWith(uri)) {\n              return `${prefix}:${iri.slice(uri.length)}`;\n            }\n          }\n          return iri;\n        },\n        list: () => Object.fromEntries(prefixes)\n      };\n    };\n    \n    const prefixes = usePrefixes();\n    prefixes.register(prefixMap);\n    \n    // Assert\n    expect(prefixes.shrink(\"http://example.org/Person\")).toBe(\"ex:Person\");\n    expect(prefixes.shrink(\"http://xmlns.com/foaf/0.1/name\")).toBe(\"foaf:name\");\n    expect(prefixes.shrink(\"http://other.org/term\")).toBe(\"http://other.org/term\");\n  });\n});\n"
        }
    ]
}