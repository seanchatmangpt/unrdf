{
    "sourceFile": "test/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758656505420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758656505420,
            "name": "Commit-0",
            "content": "# unrdf Test Suite\n\nThis directory contains the comprehensive test suite for the unrdf composable framework, organized using the London School of TDD methodology.\n\n## Test Structure\n\n```\ntest/\n├── composables/           # Tests for each composable\n│   ├── useStore.test.mjs\n│   ├── useTerms.test.mjs\n│   ├── usePrefixes.test.mjs\n│   ├── useTurtle.test.mjs\n│   ├── useGraph.test.mjs\n│   ├── useValidator.test.mjs\n│   ├── useReasoner.test.mjs\n│   ├── useCanon.test.mjs\n│   └── useZod.test.mjs\n├── utils/                 # Tests for utility functions\n│   ├── term-utils.test.mjs\n│   └── utils.test.mjs\n└── README.md             # This file\n```\n\n## Test Methodology\n\n### London School of TDD\n\nEach test file follows the London School of TDD approach:\n\n1. **Start with the simplest failing test** - Write a test that fails for the right reason\n2. **Write minimal code to make it pass** - Implement just enough to satisfy the test\n3. **Refactor while keeping tests green** - Improve the code without breaking tests\n4. **Add complexity incrementally** - Build up functionality test by test\n\n### Test Organization\n\n- **One test file per composable** - Each composable has its own dedicated test file\n- **Self-contained tests** - Each test is independent and doesn't reference other files\n- **Clear naming** - Test names describe the expected behavior\n- **Arrange-Act-Assert pattern** - Each test follows the AAA pattern\n\n## Running Tests\n\n### All Tests\n```bash\npnpm test:run          # Run all tests\npnpm test:coverage     # Run with coverage\npnpm test:watch        # Watch mode\n```\n\n### Specific Test Files\n```bash\n# Run specific composable tests\npnpm vitest test/composables/useStore.test.mjs\npnpm vitest test/composables/useGraph.test.mjs\n\n# Run utility tests\npnpm vitest test/utils/term-utils.test.mjs\n```\n\n### Test Scripts\n\n- `pnpm test:run` - Run all tests without coverage\n- `pnpm test:coverage` - Run tests with coverage reporting\n- `pnpm test:watch` - Watch mode for development\n- `pnpm test:ui` - Interactive UI mode\n- `pnpm test:bench` - Benchmark tests\n\n## Test Configuration\n\nThe test suite is configured in `vitest.config.mjs` with:\n\n- **Maximum concurrency** - Uses all available CPU cores\n- **Parallel execution** - Tests run in parallel by default\n- **Thread pool** - Optimized for performance\n- **Coverage reporting** - Comprehensive coverage metrics\n- **Timeout settings** - Generous timeouts for RDF operations\n\n## Current Status\n\n- **Total Tests**: 92\n- **Passing**: 90\n- **Failing**: 2 (expected with TDD approach)\n- **Coverage**: Comprehensive across all composables\n\n## Failing Tests\n\nThe 2 failing tests are intentional and follow the TDD methodology:\n\n1. **useTerms literal datatype test** - Tests the expected behavior of literal creation\n2. **term-utils literal test** - Tests the utility function for literal normalization\n\nThese tests will guide the implementation of the actual composable functions.\n\n## Adding New Tests\n\nWhen adding new tests:\n\n1. **Create a new test file** in the appropriate directory\n2. **Follow the naming convention** - `[composable].test.mjs`\n3. **Use the London School of TDD** - Start with failing tests\n4. **Keep tests self-contained** - Don't reference other files\n5. **Use clear, descriptive names** - Test names should explain the expected behavior\n\n## Test Dependencies\n\nThe test suite uses:\n\n- **Vitest** - Test runner and framework\n- **N3** - RDF library for test data\n- **Zod** - Schema validation for testing\n- **Node.js** - Runtime environment\n\n## Contributing\n\nWhen contributing to the test suite:\n\n1. **Follow the existing patterns** - Use the same structure and naming\n2. **Write failing tests first** - Follow the TDD approach\n3. **Keep tests focused** - One test per behavior\n4. **Use descriptive names** - Make test intent clear\n5. **Maintain concurrency** - Don't break parallel execution\n"
        }
    ]
}