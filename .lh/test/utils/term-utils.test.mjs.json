{
    "sourceFile": "test/utils/term-utils.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758656505419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758656505419,
            "name": "Commit-0",
            "content": "import { describe, expect, it } from \"vitest\";\nimport { z } from \"zod\";\n\n/**\n * @fileoverview Tests for utility functions\n * \n * Tests the dark matter utility functions using London School of TDD\n */\n\ndescribe(\"utility functions\", () => {\n  it(\"should normalize input to NamedNode\", () => {\n    // Arrange\n    const { DataFactory } = require(\"n3\");\n    const { namedNode } = DataFactory;\n    \n    const asNamedNode = (iri) => {\n      if (iri?.termType === \"NamedNode\") return iri;\n      return namedNode(String(iri));\n    };\n    \n    // Act & Assert\n    const result1 = asNamedNode(\"http://example.org/test\");\n    expect(result1.termType).toBe(\"NamedNode\");\n    expect(result1.value).toBe(\"http://example.org/test\");\n    \n    const existingNode = namedNode(\"http://example.org/existing\");\n    const result2 = asNamedNode(existingNode);\n    expect(result2).toBe(existingNode);\n  });\n\n  it(\"should normalize value to Literal\", () => {\n    // Arrange\n    const { DataFactory } = require(\"n3\");\n    const { literal } = DataFactory;\n    \n    const asLiteral = (value, datatype = \"http://www.w3.org/2001/XMLSchema#string\") => {\n      return literal(String(value), datatype);\n    };\n    \n    // Act & Assert\n    const result = asLiteral(\"test value\", \"http://www.w3.org/2001/XMLSchema#string\");\n    expect(result.termType).toBe(\"Literal\");\n    expect(result.value).toBe(\"test value\");\n    expect(result.datatype.value).toBe(\"http://www.w3.org/2001/XMLSchema#string\");\n  });\n\n  it(\"should convert quad to JSON\", () => {\n    // Arrange\n    const { DataFactory } = require(\"n3\");\n    const { namedNode, literal, quad } = DataFactory;\n    \n    const quadToJSON = (q) => {\n      return {\n        subject: q.subject.value,\n        predicate: q.predicate.value,\n        object: q.object.value,\n        graph: q.graph.value || null,\n      };\n    };\n    \n    const testQuad = quad(\n      namedNode(\"http://example.org/subject\"),\n      namedNode(\"http://example.org/predicate\"),\n      literal(\"object value\")\n    );\n    \n    // Act\n    const result = quadToJSON(testQuad);\n    \n    // Assert\n    expect(result).toEqual({\n      subject: \"http://example.org/subject\",\n      predicate: \"http://example.org/predicate\",\n      object: \"object value\",\n      graph: null\n    });\n  });\n\n  it(\"should validate quad JSON with Zod\", () => {\n    // Arrange\n    const QuadSchema = z.object({\n      subject: z.string().url(),\n      predicate: z.string().url(),\n      object: z.string(),\n      graph: z.string().url().nullable().optional(),\n    });\n    \n    const validateQuadJSON = (obj) => {\n      return QuadSchema.parse(obj);\n    };\n    \n    const validQuad = {\n      subject: \"http://example.org/subject\",\n      predicate: \"http://example.org/predicate\",\n      object: \"object value\",\n      graph: null\n    };\n    \n    // Act\n    const result = validateQuadJSON(validQuad);\n    \n    // Assert\n    expect(result).toEqual(validQuad);\n  });\n\n  it(\"should throw Zod validation error for invalid quad JSON\", () => {\n    // Arrange\n    const QuadSchema = z.object({\n      subject: z.string().url(),\n      predicate: z.string().url(),\n      object: z.string(),\n      graph: z.string().url().nullable().optional(),\n    });\n    \n    const validateQuadJSON = (obj) => {\n      return QuadSchema.parse(obj);\n    };\n    \n    const invalidQuad = {\n      subject: \"not-a-url\",\n      predicate: \"http://example.org/predicate\",\n      object: \"object value\"\n    };\n    \n    // Act & Assert\n    expect(() => validateQuadJSON(invalidQuad)).toThrow();\n  });\n});\n"
        }
    ]
}