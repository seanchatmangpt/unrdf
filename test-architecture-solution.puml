@startuml Test Architecture Solution

!theme plain
skinparam backgroundColor #FFFFFF
skinparam componentStyle rectangle

title Knowledge Engine Hook Tests - Rearchitected Solution

package "Rearchitected Test Architecture" {
  
  package "Test Strategy Layer" {
    component [Integration Tests] as IT
    component [Unit Tests] as UT
    component [Mock Strategy] as MS
    component [Test Utilities] as TU
  }
  
  package "Test Categories" {
    component [Core Functionality Tests] as CFT
    component [Security Tests] as ST
    component [Performance Tests] as PT
    component [Edge Case Tests] as ECT
  }
  
  package "Mock Infrastructure" {
    component [Dependency Injection] as DI
    component [Test Doubles] as TD
    component [Mock Factories] as MF
    component [Stub Services] as SS
  }
  
  package "Test Utilities" {
    component [Hook Builder] as HB
    component [Event Factory] as EF
    component [Assertion Helpers] as AH
    component [Test Data] as TDATA
  }
}

package "Source Architecture" {
  package "Core Engine" {
    component [KnowledgeHookManager] as KHM
    component [HookExecutor] as HE
    component [ConditionEvaluator] as CE
  }
  
  package "Interfaces" {
    interface [IQueryEngine] as IQE
    interface [IFileResolver] as IFR
    interface [IValidator] as IV
  }
  
  package "Implementations" {
    component [QueryEngine] as QE
    component [FileResolver] as FR
    component [SchemaValidator] as SV
  }
}

' Rearchitected relationships
IT --> KHM : "Direct testing"
UT --> HE : "Isolated testing"
UT --> CE : "Isolated testing"

CFT --> HB : "Uses builder pattern"
ST --> DI : "Injects mock services"
PT --> SS : "Uses stub implementations"
ECT --> MF : "Uses mock factories"

KHM --> IQE : "Depends on interface"
KHM --> IFR : "Depends on interface"
KHM --> IV : "Depends on interface"

QE --> IQE : "Implements interface"
FR --> IFR : "Implements interface"
SV --> IV : "Implements interface"

' Mock strategy
MS --> DI : "Dependency injection for mocks"
MS --> TD : "Test doubles instead of spies"
MS --> MF : "Factory pattern for test objects"

note right of DI
  **Dependency Injection Strategy:**
  - Pass mock implementations to constructors
  - No ESM spying required
  - Clean separation of concerns
  - Easy to test different scenarios
end note

note right of HB
  **Hook Builder Pattern:**
  - Fluent API for creating test hooks
  - Pre-configured valid hooks
  - Easy to modify for edge cases
  - Reduces test boilerplate
end note

note right of MF
  **Mock Factory Pattern:**
  - Centralized mock creation
  - Consistent mock behavior
  - Easy to maintain and update
  - Reusable across test files
end note

@enduml
