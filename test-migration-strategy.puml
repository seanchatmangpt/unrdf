@startuml Test Migration Strategy

!theme plain
skinparam backgroundColor #FFFFFF
skinparam componentStyle rectangle

title Knowledge Engine Test Migration Strategy

package "Current State" as Current {
    component "Broken Tests" as Broken {
        [78 failed tests]
        [ESM mocking issues]
        [Import path problems]
        [Promise handling errors]
        [Unrealistic expectations]
    }
    
    component "Working Tests" as Working {
        [file-system-edge-cases: 14/14 passing]
        [error-handling-recovery: 13/13 passing]
        [knowledge-hooks-permutation: passing]
    }
}

package "Migration Phases" as Migration {
    component "Phase 1: Infrastructure" as Phase1 {
        [Create TestBase.mjs]
        [Create MockFactory.mjs]
        [Create TestDataBuilder.mjs]
        [Create AssertionHelpers.mjs]
        [Update vitest config]
    }
    
    component "Phase 2: Core Tests" as Phase2 {
        [Migrate concurrency tests]
        [Migrate memory tests]
        [Migrate performance tests]
        [Fix ESM mocking issues]
        [Fix import paths]
    }
    
    component "Phase 3: Edge Cases" as Phase3 {
        [Migrate SPARQL/SHACL tests]
        [Migrate security tests]
        [Migrate data consistency tests]
        [Fix promise handling]
        [Fix expectations]
    }
    
    component "Phase 4: Validation" as Phase4 {
        [Run full test suite]
        [Validate all tests pass]
        [Performance benchmarking]
        [Documentation updates]
        [CI/CD integration]
    }
}

package "Implementation Details" as Implementation {
    component "TestBase.mjs" as TestBase {
        +setup(): Promise<void>
        +teardown(): Promise<void>
        +createTempDir(): Promise<string>
        +cleanup(): Promise<void>
        +getManager(): KnowledgeHookManager
        +getStore(): Store
    }
    
    component "MockFactory.mjs" as MockFactory {
        +createConditionEvaluatorMock(): Mock
        +createFileResolverMock(): Mock
        +createQueryEngineMock(): Mock
        +createHookExecutorMock(): Mock
        +resetAllMocks(): void
    }
    
    component "TestDataBuilder.mjs" as TestDataBuilder {
        +buildHook(overrides?: object): KnowledgeHook
        +buildEvent(overrides?: object): HookEvent
        +buildStore(quads?: Quad[]): Store
        +buildCondition(overrides?: object): Condition
        +buildFileRef(overrides?: object): FileRef
    }
    
    component "AssertionHelpers.mjs" as AssertionHelpers {
        +assertHookSuccess(result: HookResult): void
        +assertHookFailure(result: HookResult, expectedError?: string): void
        +assertHookExecutionTime(result: HookResult, maxTime: number): void
        +assertStoreState(store: Store, expectedQuads: Quad[]): void
    }
}

package "Success Metrics" as Metrics {
    component "Test Results" as Results {
        [All tests passing: 106/106]
        [No ESM mocking errors]
        [No import path errors]
        [No promise handling errors]
        [Realistic expectations]
    }
    
    component "Performance" as Performance {
        [Test execution time < 30s]
        [Memory usage < 500MB]
        [No memory leaks]
        [Fast test feedback]
    }
    
    component "Maintainability" as Maintainability {
        [Consistent test structure]
        [Reusable test utilities]
        [Clear test documentation]
        [Easy to add new tests]
    }
}

Current --> Phase1 : "Start migration"
Phase1 --> Phase2 : "Infrastructure ready"
Phase2 --> Phase3 : "Core tests fixed"
Phase3 --> Phase4 : "All tests migrated"
Phase4 --> Results : "Validation complete"

Phase1 --> TestBase : "Creates"
Phase1 --> MockFactory : "Creates"
Phase1 --> TestDataBuilder : "Creates"
Phase1 --> AssertionHelpers : "Creates"

Results --> Performance : "Validates"
Results --> Maintainability : "Ensures"

note right of Current
    **Current Issues:**
    - 78 failed tests out of 106
    - ESM mocking incompatibility
    - Incorrect relative import paths
    - Promise handling on non-Promise values
    - Tests expect features not implemented
    - Duplicate hook name conflicts
    - Zod validation schema mismatches
end note

note right of Migration
    **Migration Benefits:**
    - Systematic approach to fixing tests
    - Infrastructure-first strategy
    - Incremental validation
    - Clear success metrics
    - Maintainable test structure
end note

@enduml
