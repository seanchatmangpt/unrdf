syntax = "proto3";

package kgc.sidecar.v1;

// KGC Sidecar Service
// Provides gRPC interface for Knowledge Graph Conformance operations
service KGCSidecar {
  // Apply a transaction with hooks and return receipt
  rpc ApplyTransaction(ApplyTransactionRequest) returns (ApplyTransactionResponse);

  // Validate a graph against a policy pack
  rpc ValidateGraph(ValidateGraphRequest) returns (ValidateGraphResponse);

  // Evaluate a single knowledge hook
  rpc EvaluateHook(EvaluateHookRequest) returns (EvaluateHookResponse);

  // Query policy pack information
  rpc QueryPolicy(QueryPolicyRequest) returns (QueryPolicyResponse);

  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);

  // Get metrics
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);

  // Stream transaction receipts (optional advanced feature)
  rpc StreamReceipts(StreamReceiptsRequest) returns (stream TransactionReceipt);
}

// Transaction messages
message ApplyTransactionRequest {
  string transaction_id = 1;
  Delta delta = 2;
  TransactionOptions options = 3;
  string actor = 4;
  map<string, string> context = 5;
}

message ApplyTransactionResponse {
  bool success = 1;
  TransactionReceipt receipt = 2;
  repeated Error errors = 3;
  PerformanceMetrics metrics = 4;
}

message Delta {
  repeated Quad additions = 1;
  repeated Quad deletions = 2;
  int32 size = 3;
}

message Quad {
  string subject = 1;
  string predicate = 2;
  string object = 3;
  string graph = 4;
  string object_datatype = 5;
  string object_language = 6;
}

message TransactionOptions {
  bool after_hash_only = 1;
  int32 timeout = 2;
  bool strict_mode = 3;
  bool enable_hooks = 4;
  bool enable_lockchain = 5;
  string policy_pack = 6;
  map<string, string> variables = 7;
}

message TransactionReceipt {
  string transaction_id = 1;
  bool committed = 2;
  Hash before_hash = 3;
  Hash after_hash = 4;
  repeated HookResult hook_results = 5;
  int64 timestamp = 6;
  string actor = 7;
  DeltaSummary delta_summary = 8;
  PerformanceMetrics performance = 9;
  string lockchain_ref = 10;
}

message Hash {
  string sha3 = 1;
  string blake3 = 2;
}

message HookResult {
  string hook_id = 1;
  string hook_name = 2;
  bool passed = 3;
  bool vetoed = 4;
  string error = 5;
  int64 duration_ms = 6;
  map<string, string> metadata = 7;
}

message DeltaSummary {
  int32 additions_count = 1;
  int32 deletions_count = 2;
  int32 total_quads = 3;
}

// Validation messages
message ValidateGraphRequest {
  string graph_id = 1;
  repeated Quad quads = 2;
  string policy_pack = 3;
  bool strict_mode = 4;
  map<string, string> options = 5;
}

message ValidateGraphResponse {
  bool valid = 1;
  repeated ValidationResult violations = 2;
  repeated Error errors = 3;
  PerformanceMetrics metrics = 4;
}

message ValidationResult {
  string severity = 1;
  string message = 2;
  string path = 3;
  string constraint = 4;
  map<string, string> details = 5;
}

// Hook evaluation messages
message EvaluateHookRequest {
  string hook_id = 1;
  HookDefinition hook = 2;
  HookEvent event = 3;
  map<string, string> options = 4;
}

message EvaluateHookResponse {
  bool success = 1;
  HookResult result = 2;
  repeated Error errors = 3;
  PerformanceMetrics metrics = 4;
}

message HookDefinition {
  HookMeta meta = 1;
  Condition when = 2;
  Effect then = 3;
}

message HookMeta {
  string name = 1;
  string description = 2;
  string version = 3;
  repeated string tags = 4;
}

message Condition {
  string kind = 1;
  FileRef ref = 2;
  map<string, string> spec = 3;
  map<string, string> options = 4;
}

message Effect {
  string kind = 1;
  FileRef ref = 2;
  map<string, string> options = 3;
}

message FileRef {
  string uri = 1;
  string sha256 = 2;
  string media_type = 3;
  int64 size = 4;
}

message HookEvent {
  string transaction_id = 1;
  Delta delta = 2;
  Hash before_hash = 3;
  string actor = 4;
  map<string, string> context = 5;
}

// Policy messages
message QueryPolicyRequest {
  string policy_pack = 1;
  string query_type = 2;
  map<string, string> filters = 3;
}

message QueryPolicyResponse {
  PolicyPack policy_pack = 1;
  repeated Error errors = 2;
}

message PolicyPack {
  string name = 1;
  string version = 2;
  bool active = 3;
  repeated HookDefinition hooks = 4;
  map<string, string> metadata = 5;
}

// Health check messages
message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
  }
  ServingStatus status = 1;
  map<string, string> details = 2;
  int64 uptime_seconds = 3;
}

// Metrics messages
message GetMetricsRequest {
  repeated string metric_names = 1;
  int64 since_timestamp = 2;
}

message GetMetricsResponse {
  map<string, MetricValue> metrics = 1;
  int64 timestamp = 2;
}

message MetricValue {
  oneof value {
    int64 int_value = 1;
    double double_value = 2;
    string string_value = 3;
  }
  string unit = 4;
}

// Performance metrics
message PerformanceMetrics {
  int64 duration_ms = 1;
  int64 cpu_time_ms = 2;
  int64 memory_bytes = 3;
  map<string, int64> timings = 4;
}

// Stream messages
message StreamReceiptsRequest {
  string subscription_id = 1;
  repeated string transaction_ids = 2;
  int64 since_timestamp = 3;
}

// Common error message
message Error {
  string code = 1;
  string message = 2;
  string path = 3;
  map<string, string> details = 4;
}
