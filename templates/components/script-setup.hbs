{{!--
  @file templates/components/script-setup.hbs
  @description Handlebars template for generating Vue SFC <script setup> sections
  @usage Called by vue-sfc-generator.mjs with context: { component: { filepath, description, imports, typedefs, state, computed, methods, lifecycle } }
--}}
<script setup>
/**
 * @file {{component.filepath}}
 * @description {{component.description}}
 */

{{#each component.imports}}
{{#if types}}
/**
{{#each types}}
 * @typedef {import('{{../path}}').{{this}}} {{this}}
{{/each}}
 */
{{else}}
import { {{symbols}} } from '{{path}}'
{{/if}}
{{/each}}

{{#each component.defineProps}}
/**
 * Component props
{{#each this}}
 * @property { {{type}} } {{name}} - {{description}}
{{/each}}
 */
const props = defineProps()
{{/each}}

{{#each component.defineEmits}}
/**
 * Component emits
{{#each this}}
 * @event {{name}} - {{description}}
{{/each}}
 */
const emit = defineEmits([{{#each this}}'{{name}}'{{#unless @last}}, {{/unless}}{{/each}}])
{{/each}}

{{#each component.state}}
/** @type {import('vue').Ref<{{type}}>} */
const {{name}} = ref({{initial}})
{{/each}}

{{#each component.computed}}
/** @type {import('vue').ComputedRef<{{type}}>} */
const {{name}} = computed(() => {{expression}})
{{/each}}

{{#each component.watchers}}
watch(() => {{source}}, {{handler}})
{{/each}}

{{#each component.methods}}
/**
 * {{description}}
{{#each params}}
 * @param { {{type}} } {{name}} - {{description}}
{{/each}}
{{#if returns}}
 * @returns { {{returns}} }
{{/if}}
 */
{{#if async}}async {{/if}}function {{name}}({{#each params}}{{name}}{{#unless @last}}, {{/unless}}{{/each}}) {
  {{body}}
}
{{/each}}

{{#each component.lifecycle}}
{{hook}}(() => {
  {{code}}
})
{{/each}}
</script>
