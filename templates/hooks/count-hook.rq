# Count Aggregation Hook Template
# This template provides a SPARQL query for counting resources and triggering on thresholds.
# Ideal for capacity monitoring, quota enforcement, and inventory management.
#
# Usage:
# 1. Customize the counting criteria and threshold
# 2. Update the GROUP BY and HAVING clauses as needed
# 3. Calculate the SHA-256 hash of this file
# 4. Reference this file in your Knowledge Hook definition
#
# Example: Detect when resource count exceeds capacity

PREFIX ex: <http://example.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

# Option 1: Simple count with threshold
ASK WHERE {
  {
    SELECT (COUNT(?resource) AS ?count) WHERE {
      # TODO: Customize what to count
      ?resource rdf:type ex:MonitoredResource .

      # Optional: Add filters
      # ?resource ex:status "active" .
      # ?resource ex:priority "high" .
    }
  }
  # TODO: Adjust count threshold
  FILTER(?count > 100)
}

# Option 2: Grouped count with per-category thresholds
# SELECT ?category (COUNT(?resource) AS ?count) WHERE {
#   ?resource rdf:type ex:MonitoredResource ;
#             ex:category ?category .
#
#   # Optional: Filter by status, time window, etc.
#   # ?resource ex:status "active" .
# }
# GROUP BY ?category
# HAVING(COUNT(?resource) > 50)  # TODO: Adjust threshold per category

# Option 3: Count distinct values
# SELECT ?property (COUNT(DISTINCT ?value) AS ?uniqueCount) WHERE {
#   ?resource ex:hasProperty ?property ;
#             ?property ?value .
# }
# GROUP BY ?property
# HAVING(COUNT(DISTINCT ?value) < 2)  # Detect when diversity is too low

# Option 4: Count with ratio/percentage check
# SELECT ?total ?active (?active / ?total AS ?ratio) WHERE {
#   {
#     SELECT (COUNT(?r) AS ?total) WHERE {
#       ?r rdf:type ex:Resource .
#     }
#   }
#   {
#     SELECT (COUNT(?r) AS ?active) WHERE {
#       ?r rdf:type ex:Resource ;
#          ex:status "active" .
#     }
#   }
# }
# HAVING(?active / ?total < 0.5)  # Alert when less than 50% active

# Option 5: Count changes in time window
# SELECT (COUNT(?resource) AS ?recentCount) WHERE {
#   ?resource rdf:type ex:Event ;
#             ex:timestamp ?timestamp .
#
#   # Time window filter (requires SPARQL 1.1 with NOW())
#   BIND(NOW() - ?timestamp AS ?age)
#   FILTER(?age < 3600)  # Last hour (3600 seconds)
# }
# HAVING(COUNT(?resource) > 1000)  # Rate limiting threshold
