# Time Window Hook Template
# This template provides a SPARQL query for analyzing data within time windows.
# Ideal for rate limiting, trend detection, and temporal anomaly detection.
#
# Usage:
# 1. Customize the time window size (in seconds)
# 2. Update the aggregation logic for your use case
# 3. Calculate the SHA-256 hash of this file
# 4. Reference this file in your Knowledge Hook definition
#
# Note: Requires SPARQL 1.1 with NOW() function support
#
# Example: Detect unusual activity in recent time period

PREFIX ex: <http://example.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

# Option 1: Count events in sliding window
SELECT (COUNT(?event) AS ?eventCount) WHERE {
  ?event rdf:type ex:MonitoredEvent ;
         ex:timestamp ?timestamp .

  # TODO: Adjust time window (in seconds)
  # 3600 = 1 hour, 86400 = 1 day, 604800 = 1 week
  BIND((NOW() - ?timestamp) AS ?age)
  FILTER(?age < 3600)  # Last hour

  # Optional: Filter by event type or properties
  # ?event ex:severity "high" .
}
HAVING(COUNT(?event) > 100)  # TODO: Adjust threshold

# Option 2: Detect rate spikes (compare to baseline)
# SELECT ?recentRate ?baselineRate WHERE {
#   # Recent window (last hour)
#   {
#     SELECT (COUNT(?event) AS ?recentRate) WHERE {
#       ?event rdf:type ex:Event ;
#              ex:timestamp ?timestamp .
#       BIND((NOW() - ?timestamp) AS ?age)
#       FILTER(?age < 3600)
#     }
#   }
#   # Baseline window (previous 24 hours, excluding recent hour)
#   {
#     SELECT (COUNT(?event) / 24 AS ?baselineRate) WHERE {
#       ?event rdf:type ex:Event ;
#              ex:timestamp ?timestamp .
#       BIND((NOW() - ?timestamp) AS ?age)
#       FILTER(?age >= 3600 && ?age < 90000)
#     }
#   }
# }
# HAVING(?recentRate > (?baselineRate * 2))  # 2x spike threshold

# Option 3: Moving average with threshold
# SELECT (AVG(?value) AS ?movingAvg) WHERE {
#   ?measurement ex:timestamp ?timestamp ;
#                ex:value ?value .
#
#   # TODO: Adjust window size
#   BIND((NOW() - ?timestamp) AS ?age)
#   FILTER(?age < 3600)  # 1 hour window
# }
# HAVING(AVG(?value) > 1000)  # TODO: Adjust threshold

# Option 4: Multi-window comparison (trend detection)
# SELECT ?window1Avg ?window2Avg (?window1Avg - ?window2Avg AS ?delta) WHERE {
#   # Window 1: Last hour
#   {
#     SELECT (AVG(?value) AS ?window1Avg) WHERE {
#       ?m ex:timestamp ?timestamp ;
#          ex:value ?value .
#       BIND((NOW() - ?timestamp) AS ?age)
#       FILTER(?age < 3600)
#     }
#   }
#   # Window 2: Previous hour
#   {
#     SELECT (AVG(?value) AS ?window2Avg) WHERE {
#       ?m ex:timestamp ?timestamp ;
#          ex:value ?value .
#       BIND((NOW() - ?timestamp) AS ?age)
#       FILTER(?age >= 3600 && ?age < 7200)
#     }
#   }
# }
# HAVING(ABS(?window1Avg - ?window2Avg) > 500)  # Significant change threshold

# Option 5: Rate limiting per entity
# SELECT ?entity (COUNT(?action) AS ?actionCount) WHERE {
#   ?action ex:performedBy ?entity ;
#           ex:timestamp ?timestamp .
#
#   BIND((NOW() - ?timestamp) AS ?age)
#   FILTER(?age < 300)  # Last 5 minutes
# }
# GROUP BY ?entity
# HAVING(COUNT(?action) > 100)  # Per-entity rate limit
