{{!--
  @file templates/tests/schema.test.mjs.hbs
  @description Handlebars template for generating Vitest tests for Zod schemas
  @usage Called by test-generator.mjs with context: { test: { schemaName, validData, invalidData } }
--}}
/**
 * @file test/schemas/{{test.schemaName}}.test.mjs
 * @description Tests for {{test.schemaName}}Schema
 */

import { describe, it, expect } from 'vitest'
import { {{test.schemaName}}Schema } from '../schemas/index.mjs'

describe('{{test.schemaName}}Schema', () => {
  describe('Valid data', () => {
{{#each test.validData}}
    it('should validate {{description}}', () => {
      const data = {{data}}

      expect(() => {{../test.schemaName}}Schema.parse(data)).not.toThrow()
      const result = {{../test.schemaName}}Schema.parse(data)
      expect(result).toEqual(data)
    })
{{/each}}
  })

  describe('Invalid data', () => {
{{#each test.invalidData}}
    it('should reject {{description}}', () => {
      const data = {{data}}

      expect(() => {{../test.schemaName}}Schema.parse(data)).toThrow()
    })
{{/each}}
  })

{{#if test.refinements}}
  describe('Refinements', () => {
{{#each test.refinements}}
    it('should enforce {{description}}', () => {
      const data = {{data}}

      expect(() => {{../../test.schemaName}}Schema.parse(data)).toThrow()
    })
{{/each}}
  })
{{/if}}

  describe('Optional fields', () => {
{{#each test.optionalFields}}
    it('should allow missing {{name}}', () => {
      const data = {{data}}

      expect(() => {{../../test.schemaName}}Schema.parse(data)).not.toThrow()
    })
{{/each}}
  })
})
