{{!--
  @file templates/api/event-handler.mjs.hbs
  @description Handlebars template for generating Nitro API event handlers
  @usage Called by api-route-generator.mjs with context: { route: { name, description, schemaName, dataName, mockData, validation, otel } }
--}}
/**
 * @file server/api/{{route.name}}.mjs
 * @description {{route.description}}
 */

import { {{route.schemaName}}Schema } from '~/schemas/index.mjs'
{{#if route.otel}}
import { recordSpan, recordError } from '~/utils/otel.mjs'
{{/if}}

/**
 * Mock data for {{route.schemaName}}
 * @type {import('~/schemas/index.mjs').{{route.schemaName}}[]}
 */
const {{route.dataName}} = {{route.mockData}}

/**
 * API endpoint for {{route.name}}
 * @param {import('h3').H3Event} event - H3 event object
 * @returns {Promise<import('~/schemas/index.mjs').{{route.schemaName}}[]>}
 */
export default eventHandler(async (event) => {
{{#if route.otel}}
  return await recordSpan('api.{{route.name}}', async () => {
{{/if}}
    try {
{{#if route.validation}}
      // Validate data before returning
      return {{route.dataName}}.map(item => {{route.schemaName}}Schema.parse(item))
{{else}}
      return {{route.dataName}}
{{/if}}
    } catch (error) {
{{#if route.otel}}
      recordError(error, { endpoint: '{{route.name}}' })
{{/if}}
      throw createError({
        statusCode: 500,
        message: 'Failed to fetch {{route.name}}'
      })
    }
{{#if route.otel}}
  })
{{/if}}
})
