{{- if .Values.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "knowd.fullname" . }}-pvc
  labels:
    {{- include "knowd.labels" . | nindent 4 }}
spec:
  accessModes:
    {{- range .Values.persistence.accessModes }}
    - {{ . | quote }}
    {{- end }}
  resources:
    requests:
      storage: {{ .Values.persistence.size | quote }}
  {{- if .Values.persistence.storageClass }}
  {{- if (eq "-" .Values.persistence.storageClass) }}
  storageClassName: ""
  {{- else }}
  storageClassName: {{ .Values.persistence.storageClass | quote }}
  {{- end }}
  {{- end }}
---
{{- end }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "knowd.fullname" . }}-config
  labels:
    {{- include "knowd.labels" . | nindent 4 }}
data:
  config.yaml: |
    server:
      addr: {{ .Values.config.server.addr | quote }}
      dataDir: {{ .Values.config.server.dataDir | quote }}
      coreURL: {{ .Values.config.server.coreURL | quote }}
      store: {{ .Values.config.server.store | quote }}
      packs: {{ .Values.config.server.packs | quote }}
      watchPacks: {{ .Values.config.server.watchPacks }}

    telemetry:
      serviceName: {{ .Values.config.telemetry.serviceName | quote }}
      serviceVersion: {{ .Values.config.telemetry.serviceVersion | quote }}
      environment: {{ .Values.config.telemetry.environment | quote }}
      traceEnabled: {{ .Values.config.telemetry.traceEnabled }}
      metricsEnabled: {{ .Values.config.telemetry.metricsEnabled }}
      sampleRatio: {{ .Values.config.telemetry.sampleRatio }}

    policy:
      hotReload: {{ .Values.config.policy.hotReload }}
      validateOnLoad: {{ .Values.config.policy.validateOnLoad }}

    hooks:
      enabled: {{ .Values.config.hooks.enabled }}
      maxConcurrency: {{ .Values.config.hooks.maxConcurrency }}
      timeout: {{ .Values.config.hooks.timeout | quote }}

    cluster:
      mode: {{ .Values.config.cluster.mode | quote }}
      peerAddrs: {{ .Values.config.cluster.peerAddrs | quote }}
      mTLSCert: {{ .Values.config.cluster.mTLSCert | quote }}
      mTLSKey: {{ .Values.config.cluster.mTLSKey | quote }}
      mTLSCA: {{ .Values.config.cluster.mTLSCA | quote }}

    vector:
      enabled: {{ .Values.config.vector.enabled }}
      dimensions: {{ .Values.config.vector.dimensions }}
      indexType: {{ .Values.config.vector.indexType | quote }}

    wasm:
      enabled: {{ .Values.config.wasm.enabled }}
      maxMemoryMB: {{ .Values.config.wasm.maxMemoryMB }}
      enableWASI: {{ .Values.config.wasm.enableWASI }}

    security:
      mTLSEnabled: {{ .Values.config.security.mTLSEnabled }}
      jwtEnabled: {{ .Values.config.security.jwtEnabled }}
      corsEnabled: {{ .Values.config.security.corsEnabled }}
      corsOrigins: {{ .Values.config.security.corsOrigins | toJson }}

    logging:
      level: {{ .Values.config.logging.level | quote }}
      format: {{ .Values.config.logging.format | quote }}
      output: {{ .Values.config.logging.output | quote }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "knowd.fullname" . }}
  labels:
    {{- include "knowd.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "knowd.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "knowd.selectorLabels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8090"
        prometheus.io/path: "/metrics"
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "knowd.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: knowd
        image: {{ include "knowd.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 8090
          name: http
          protocol: TCP
        env:
        - name: KNOWD_ADDR
          value: {{ .Values.config.server.addr | quote }}
        - name: KNOWD_DATA_DIR
          value: {{ .Values.config.server.dataDir | quote }}
        - name: KNOWD_STORE
          value: {{ .Values.config.server.store | quote }}
        - name: KNOWD_OTEL_TRACING
          value: {{ .Values.config.telemetry.traceEnabled | quote }}
        - name: KNOWD_OTEL_METRICS
          value: {{ .Values.config.telemetry.metricsEnabled | quote }}
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://jaeger-collector.{{ .Values.observability.jaeger.namespace | default "monitoring" }}.svc.cluster.local:14268/api/traces"
        - name: OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
          value: "http://prometheus.{{ .Values.observability.prometheus.namespace | default "monitoring" }}.svc.cluster.local:9090/api/v1/write"
        {{- range .Values.extraEnvVars }}
        - name: {{ .name }}
          value: {{ .value | quote }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8090
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8090
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
        - name: data
          mountPath: {{ .Values.config.server.dataDir }}
        - name: config
          mountPath: /etc/knowd
          readOnly: true
        {{- range .Values.extraVolumeMounts }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          {{- if .readOnly }}
          readOnly: true
          {{- end }}
        {{- end }}
      {{- with .Values.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sidecars }}
      containers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: data
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "knowd.fullname" . }}-pvc
        {{- else }}
        emptyDir: {}
        {{- end }}
      - name: config
        configMap:
          name: {{ include "knowd.fullname" . }}-config
      {{- range .Values.extraVolumes }}
      - name: {{ .name }}
        {{- if .configMap }}
        configMap:
          name: {{ .configMap.name }}
        {{- else if .secret }}
        secret:
          secretName: {{ .secret.secretName }}
        {{- else if .emptyDir }}
        emptyDir: {}
        {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
