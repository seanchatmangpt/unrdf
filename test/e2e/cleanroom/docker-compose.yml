version: '3.9'

# Cleanroom Testcontainer Stack with OpenTelemetry Weaver
# Purpose: Isolated, reproducible integration testing with full observability
# Startup: < 30 seconds | Cleanup: Automatic | Network: Isolated

networks:
  cleanroom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
          gateway: 172.30.0.1

services:
  # =============================================================================
  # OBSERVABILITY LAYER
  # =============================================================================

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    container_name: cleanroom-otel-collector
    hostname: otel-collector
    networks:
      cleanroom-network:
        ipv4_address: 172.30.0.10
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "13133:13133" # Health check
    volumes:
      - ./otel-collector-config.yaml:/etc/otel/config.yaml:ro
    command: ["--config=/etc/otel/config.yaml"]
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:13133/"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    environment:
      - OTEL_LOG_LEVEL=debug
    depends_on:
      - jaeger

  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: cleanroom-jaeger
    hostname: jaeger
    networks:
      cleanroom-network:
        ipv4_address: 172.30.0.11
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC collector
      - "14268:14268" # HTTP collector
      - "14269:14269" # Health check
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
      - MEMORY_MAX_TRACES=10000
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:14269/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # =============================================================================
  # APPLICATION LAYER
  # =============================================================================

  sidecar:
    build:
      context: ../../..
      dockerfile: test/e2e/cleanroom/sidecar.Dockerfile
      args:
        NODE_VERSION: "20"
    container_name: cleanroom-kgc-sidecar
    hostname: sidecar
    networks:
      cleanroom-network:
        ipv4_address: 172.30.0.20
    ports:
      - "50051:50051" # gRPC server
      - "9464:9464"   # Prometheus metrics
    environment:
      # OpenTelemetry Configuration
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_SERVICE_NAME=kgc-sidecar
      - OTEL_RESOURCE_ATTRIBUTES=service.version=2.0.0,deployment.environment=cleanroom
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_LOG_LEVEL=debug

      # Sidecar Configuration
      - GRPC_PORT=50051
      - POSTGRES_URL=postgresql://cleanroom_user:cleanroom_pass@postgres:5432/unrdf_cleanroom
      - NODE_ENV=test
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50051"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    volumes:
      - ../../../src:/app/src:ro
      - ../../../test/fixtures:/app/test/fixtures:ro

  # =============================================================================
  # DATA LAYER
  # =============================================================================

  postgres:
    image: postgres:16-alpine
    container_name: cleanroom-postgres
    hostname: postgres
    networks:
      cleanroom-network:
        ipv4_address: 172.30.0.30
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=unrdf_cleanroom
      - POSTGRES_USER=cleanroom_user
      - POSTGRES_PASSWORD=cleanroom_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cleanroom_user -d unrdf_cleanroom"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    shm_size: 256mb

volumes:
  postgres-data:
    driver: local
    name: cleanroom-postgres-data

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================
#
# Start cleanroom environment:
#   docker-compose up -d
#
# Wait for all services to be healthy:
#   docker-compose ps
#
# View logs:
#   docker-compose logs -f sidecar
#   docker-compose logs -f otel-collector
#
# Access Jaeger UI:
#   open http://localhost:16686
#
# Execute gRPC health check:
#   grpc_health_probe -addr localhost:50051
#
# Run tests:
#   npm test test/e2e/cleanroom/
#
# Cleanup:
#   docker-compose down -v
#
# Rebuild sidecar:
#   docker-compose build sidecar
#   docker-compose up -d sidecar
#
# =============================================================================
# OBSERVABILITY ACCESS
# =============================================================================
#
# Jaeger UI:        http://localhost:16686
# OTEL Collector:   http://localhost:13133 (health)
# Prometheus:       http://localhost:8888/metrics
# Sidecar Metrics:  http://localhost:9464/metrics
#
# =============================================================================
