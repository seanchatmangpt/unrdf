# OpenTelemetry Collector Configuration
# Purpose: Central telemetry hub for cleanroom testing
# Receives: OTLP traces, metrics, logs from CLI and Sidecar
# Exports: Jaeger (traces), Prometheus (metrics), Console (logs)

receivers:
  # OTLP receivers for traces, metrics, and logs
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
        max_recv_msg_size_mib: 16
        read_buffer_size: 524288
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "*"

  # Prometheus receiver for scraping metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['localhost:8888']

        - job_name: 'kgc-sidecar'
          scrape_interval: 10s
          static_configs:
            - targets: ['sidecar:9464']

processors:
  # Batch processor for efficient export
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

  # Resource detection for automatic attributes
  resourcedetection:
    detectors: [env, system, docker]
    timeout: 5s
    override: false

  # Attributes processor for span enrichment
  attributes:
    actions:
      # Add deployment environment
      - key: deployment.environment
        value: cleanroom
        action: insert

      # Add test run ID from environment
      - key: test.run_id
        from_attribute: TEST_RUN_ID
        action: insert

  # Span processor for filtering and transformation
  span:
    name:
      # Normalize span names
      to_attributes:
        rules:
          - ^\/(.*)$

  # Tail sampling for performance testing
  tail_sampling:
    decision_wait: 10s
    num_traces: 100
    expected_new_traces_per_sec: 10
    policies:
      # Always sample errors
      - name: error-sampling
        type: status_code
        status_code:
          status_codes: [ERROR]

      # Sample slow operations (> 500ms)
      - name: slow-sampling
        type: latency
        latency:
          threshold_ms: 500

      # Probabilistic sampling for others (10%)
      - name: probabilistic-sampling
        type: probabilistic
        probabilistic:
          sampling_percentage: 10

exporters:
  # Jaeger exporter for distributed tracing
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true

  # Prometheus exporter for metrics
  prometheus:
    endpoint: 0.0.0.0:8888
    namespace: cleanroom
    const_labels:
      environment: test

  # Logging exporter for debugging
  logging:
    loglevel: debug
    sampling_initial: 5
    sampling_thereafter: 200

  # OTLP exporter for forwarding (optional, for chaining)
  # otlp/jaeger:
  #   endpoint: jaeger:4317
  #   tls:
  #     insecure: true

extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133
    path: /

  # Performance profiler
  pprof:
    endpoint: 0.0.0.0:1777

  # zPages for debugging
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]

  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resourcedetection, attributes, batch]
      exporters: [jaeger, logging]

    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resourcedetection, batch]
      exporters: [prometheus, logging]

    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resourcedetection, batch]
      exporters: [logging]

  # Telemetry configuration for collector itself
  telemetry:
    logs:
      level: debug
      development: true
      encoding: console
      disable_caller: false
      disable_stacktrace: false
      output_paths:
        - stdout
      error_output_paths:
        - stderr

    metrics:
      level: detailed
      address: 0.0.0.0:8888

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================
#
# Receivers:
#   - OTLP gRPC (4317): Primary receiver for traces/metrics/logs
#   - OTLP HTTP (4318): Alternative HTTP endpoint
#   - Prometheus (8888): Scrapes sidecar metrics
#
# Processors:
#   - batch: Groups telemetry for efficient export (1s timeout)
#   - memory_limiter: Prevents OOM (512MB limit)
#   - resourcedetection: Auto-detects Docker/system attributes
#   - attributes: Enriches spans with deployment context
#   - tail_sampling: Samples slow/error traces
#
# Exporters:
#   - jaeger: Sends traces to Jaeger backend
#   - prometheus: Exposes metrics on :8888/metrics
#   - logging: Debug output to stdout
#
# Extensions:
#   - health_check: HTTP endpoint on :13133/ for liveness
#   - pprof: Go profiling on :1777
#   - zpages: Debug UI on :55679/debug
#
# =============================================================================
# PERFORMANCE TUNING
# =============================================================================
#
# For high-throughput testing:
#   - Increase batch.send_batch_size to 2048
#   - Increase memory_limiter.limit_mib to 1024
#   - Disable tail_sampling (comment out processor)
#   - Disable logging exporter (remove from pipelines)
#
# For debugging:
#   - Set service.telemetry.logs.level to debug
#   - Add logging exporter to all pipelines
#   - Increase logging.sampling_initial to 100
#
# =============================================================================
